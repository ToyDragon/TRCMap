/*! For license information please see test.js.LICENSE.txt */
(()=>{var e={17:e=>{"use strict";e.exports=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var r,a,l;if(Array.isArray(t)){if((r=t.length)!=n.length)return!1;for(a=r;0!=a--;)if(!e(t[a],n[a]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((r=(l=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(a=r;0!=a--;)if(!Object.prototype.hasOwnProperty.call(n,l[a]))return!1;for(a=r;0!=a--;){var o=l[a];if(!e(t[o],n[o]))return!1}return!0}return t!=t&&n!=n}},85:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=(0,r.useState)(null),a=n[0],l=n[1],o=(0,r.useRef)(!1);if(e&&!o.current){o.current=!0;try{gapi.client.sheets.spreadsheets.values.get({spreadsheetId:e.eventsSheet,range:"Events!A1:H"}).then((function(e){for(var t=JSON.parse(e.body),n=[],r=1;r<t.values.length;r++){var a=t.values[r];n.push({id:Number(a[0]),name:a[1],lat:Number(a[2]),lng:Number(a[3]),heading:Number(a[4]),zoom:Number(a[5]),hidden:"true"===(a[6]||"").toLowerCase()})}l(n)}))}catch(e){console.error(e),t()}}return[a]};var r=n(540)},221:(e,t,n)=>{"use strict";var r=n(540);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(){}var o={d:{f:l,r:function(){throw Error(a(522))},D:l,C:l,L:l,m:l,X:l,S:l,M:l},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function s(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=o,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=o.p;try{if(u.T=null,o.p=2,e)return e()}finally{u.T=t,o.p=n,o.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,o.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&o.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,l="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?o.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:l}):"script"===n&&o.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:l,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=s(t.as,t.crossOrigin);o.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&o.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin);o.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=s(t.as,t.crossOrigin);o.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else o.d.m(e)},t.requestFormReset=function(e){o.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.1.0"},247:(e,t,n)=>{"use strict";var r=n(982),a=n(540),l=n(961);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function u(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function s(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function c(e){if(u(e)!==e)throw Error(o(188))}function f(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=f(e)))return t;e=e.sibling}return null}var d=Object.assign,p=Symbol.for("react.element"),m=Symbol.for("react.transitional.element"),h=Symbol.for("react.portal"),g=Symbol.for("react.fragment"),v=Symbol.for("react.strict_mode"),y=Symbol.for("react.profiler"),b=Symbol.for("react.provider"),k=Symbol.for("react.consumer"),w=Symbol.for("react.context"),S=Symbol.for("react.forward_ref"),E=Symbol.for("react.suspense"),C=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),P=Symbol.for("react.lazy");Symbol.for("react.scope");var T=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var x=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var O=Symbol.iterator;function N(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=O&&e[O]||e["@@iterator"])?e:null}var L=Symbol.for("react.client.reference");function z(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===L?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case g:return"Fragment";case y:return"Profiler";case v:return"StrictMode";case E:return"Suspense";case C:return"SuspenseList";case T:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case h:return"Portal";case w:return(e.displayName||"Context")+".Provider";case k:return(e._context.displayName||"Context")+".Consumer";case S:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(t=e.displayName||null)?t:z(e.type)||"Memo";case P:t=e._payload,e=e._init;try{return z(e(t))}catch(e){}}return null}var M=Array.isArray,R=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,I=l.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,A={pending:!1,data:null,method:null,action:null},D=[],F=-1;function j(e){return{current:e}}function H(e){0>F||(e.current=D[F],D[F]=null,F--)}function U(e,t){F++,D[F]=e.current,e.current=t}var B=j(null),$=j(null),V=j(null),W=j(null);function q(e,t){switch(U(V,t),U($,e),U(B,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?af(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=lf(t=af(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}H(B),U(B,e)}function Q(){H(B),H($),H(V)}function G(e){null!==e.memoizedState&&U(W,e);var t=B.current,n=lf(t,e.type);t!==n&&(U($,e),U(B,n))}function K(e){$.current===e&&(H(B),H($)),W.current===e&&(H(W),Kf._currentValue=A)}var Y=Object.prototype.hasOwnProperty,X=r.unstable_scheduleCallback,Z=r.unstable_cancelCallback,J=r.unstable_shouldYield,ee=r.unstable_requestPaint,te=r.unstable_now,ne=r.unstable_getCurrentPriorityLevel,re=r.unstable_ImmediatePriority,ae=r.unstable_UserBlockingPriority,le=r.unstable_NormalPriority,oe=r.unstable_LowPriority,ie=r.unstable_IdlePriority,ue=r.log,se=r.unstable_setDisableYieldValue,ce=null,fe=null;function de(e){if("function"==typeof ue&&se(e),fe&&"function"==typeof fe.setStrictMode)try{fe.setStrictMode(ce,e)}catch(e){}}var pe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(me(e)/he|0)|0},me=Math.log,he=Math.LN2,ge=256,ve=4194304;function ye(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function be(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var a=0,l=e.suspendedLanes,o=e.pingedLanes;e=e.warmLanes;var i=134217727&r;return 0!==i?0!=(r=i&~l)?a=ye(r):0!=(o&=i)?a=ye(o):n||0!=(n=i&~e)&&(a=ye(n)):0!=(i=r&~l)?a=ye(i):0!==o?a=ye(o):n||0!=(n=r&~e)&&(a=ye(n)),0===a?0:0===t||t===a||t&l||!((l=a&-a)>=(n=t&-t)||32===l&&4194048&n)?a:t}function ke(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function we(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function Se(){var e=ge;return!(4194048&(ge<<=1))&&(ge=256),e}function Ee(){var e=ve;return!(62914560&(ve<<=1))&&(ve=4194304),e}function Ce(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function _e(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Pe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-pe(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function Te(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-pe(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function xe(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Oe(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Ne(){var e=I.p;return 0!==e?e:void 0===(e=window.event)?32:cd(e.type)}var Le=Math.random().toString(36).slice(2),ze="__reactFiber$"+Le,Me="__reactProps$"+Le,Re="__reactContainer$"+Le,Ie="__reactEvents$"+Le,Ae="__reactListeners$"+Le,De="__reactHandles$"+Le,Fe="__reactResources$"+Le,je="__reactMarker$"+Le;function He(e){delete e[ze],delete e[Me],delete e[Ie],delete e[Ae],delete e[De]}function Ue(e){var t=e[ze];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Re]||n[ze]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kf(e);null!==e;){if(n=e[ze])return n;e=kf(e)}return t}n=(e=n).parentNode}return null}function Be(e){if(e=e[ze]||e[Re]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function $e(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(o(33))}function Ve(e){var t=e[Fe];return t||(t=e[Fe]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function We(e){e[je]=!0}var qe=new Set,Qe={};function Ge(e,t){Ke(e,t),Ke(e+"Capture",t)}function Ke(e,t){for(Qe[e]=t,e=0;e<t.length;e++)qe.add(t[e])}var Ye,Xe,Ze=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Je={},et={};function tt(e,t,n){if(a=t,Y.call(et,a)||!Y.call(Je,a)&&(Ze.test(a)?et[a]=!0:(Je[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function nt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function rt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function at(e){if(void 0===Ye)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Ye=t&&t[1]||"",Xe=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Ye+e+Xe}var lt=!1;function ot(e,t){if(!e||lt)return"";lt=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var l=r.DetermineComponentFrameRoot(),o=l[0],i=l[1];if(o&&i){var u=o.split("\n"),s=i.split("\n");for(a=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;a<s.length&&!s[a].includes("DetermineComponentFrameRoot");)a++;if(r===u.length||a===s.length)for(r=u.length-1,a=s.length-1;1<=r&&0<=a&&u[r]!==s[a];)a--;for(;1<=r&&0<=a;r--,a--)if(u[r]!==s[a]){if(1!==r||1!==a)do{if(r--,0>--a||u[r]!==s[a]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=a);break}}}finally{lt=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?at(n):""}function it(e){switch(e.tag){case 26:case 27:case 5:return at(e.type);case 16:return at("Lazy");case 13:return at("Suspense");case 19:return at("SuspenseList");case 0:case 15:return ot(e.type,!1);case 11:return ot(e.type.render,!1);case 1:return ot(e.type,!0);case 31:return at("Activity");default:return""}}function ut(e){try{var t="";do{t+=it(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ft(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function pt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var mt=/[\n"\\]/g;function ht(e){return e.replace(mt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,a,l,o,i){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=t?"number"===o?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=t?yt(e,o,st(t)):null!=n?yt(e,o,st(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=l&&(e.defaultChecked=!!l),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+st(i):e.removeAttribute("name")}function vt(e,t,n,r,a,l,o,i){if(null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.type=l),null!=t||null!=n){if(("submit"===l||"reset"===l)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function yt(e,t,n){"number"===t&&pt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function kt(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function wt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(o(92));if(M(r)){if(1<r.length)throw Error(o(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function St(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Et=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Ct(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||Et.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function _t(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(o(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&Ct(e,a,r)}else for(var l in t)t.hasOwnProperty(l)&&Ct(e,l,t[l])}function Pt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Tt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),xt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Ot(e){return xt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Nt=null;function Lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var zt=null,Mt=null;function Rt(e){var t=Be(e);if(t&&(e=t.stateNode)){var n=e[Me]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[Me]||null;if(!a)throw Error(o(90));gt(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":kt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var It=!1;function At(e,t,n){if(It)return e(t,n);It=!0;try{return e(t)}finally{if(It=!1,(null!==zt||null!==Mt)&&(Us(),zt&&(t=zt,e=Mt,Mt=zt=null,Rt(t),e)))for(t=0;t<e.length;t++)Rt(e[t])}}function Dt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Me]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Ft=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),jt=!1;if(Ft)try{var Ht={};Object.defineProperty(Ht,"passive",{get:function(){jt=!0}}),window.addEventListener("test",Ht,Ht),window.removeEventListener("test",Ht,Ht)}catch(e){jt=!1}var Ut=null,Bt=null,$t=null;function Vt(){if($t)return $t;var e,t,n=Bt,r=n.length,a="value"in Ut?Ut.value:Ut.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[l-t];t++);return $t=a.slice(e,1<t?1-t:void 0)}function Wt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function qt(){return!0}function Qt(){return!1}function Gt(e){function t(t,n,r,a,l){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?qt:Qt,this.isPropagationStopped=Qt,this}return d(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=qt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=qt)},persist:function(){},isPersistent:qt}),t}var Kt,Yt,Xt,Zt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Jt=Gt(Zt),en=d({},Zt,{view:0,detail:0}),tn=Gt(en),nn=d({},en,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:mn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Xt&&(Xt&&"mousemove"===e.type?(Kt=e.screenX-Xt.screenX,Yt=e.screenY-Xt.screenY):Yt=Kt=0,Xt=e),Kt)},movementY:function(e){return"movementY"in e?e.movementY:Yt}}),rn=Gt(nn),an=Gt(d({},nn,{dataTransfer:0})),ln=Gt(d({},en,{relatedTarget:0})),on=Gt(d({},Zt,{animationName:0,elapsedTime:0,pseudoElement:0})),un=Gt(d({},Zt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),sn=Gt(d({},Zt,{data:0})),cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},fn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=dn[e])&&!!t[e]}function mn(){return pn}var hn=Gt(d({},en,{key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Wt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?fn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:mn,charCode:function(e){return"keypress"===e.type?Wt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Wt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),gn=Gt(d({},nn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),vn=Gt(d({},en,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:mn})),yn=Gt(d({},Zt,{propertyName:0,elapsedTime:0,pseudoElement:0})),bn=Gt(d({},nn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),kn=Gt(d({},Zt,{newState:0,oldState:0})),wn=[9,13,27,32],Sn=Ft&&"CompositionEvent"in window,En=null;Ft&&"documentMode"in document&&(En=document.documentMode);var Cn=Ft&&"TextEvent"in window&&!En,_n=Ft&&(!Sn||En&&8<En&&11>=En),Pn=String.fromCharCode(32),Tn=!1;function xn(e,t){switch(e){case"keyup":return-1!==wn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function On(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Nn=!1,Ln={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ln[e.type]:"textarea"===t}function Mn(e,t,n,r){zt?Mt?Mt.push(r):Mt=[r]:zt=r,0<(t=Vc(t,"onChange")).length&&(n=new Jt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Rn=null,In=null;function An(e){Ac(e,0)}function Dn(e){if(dt($e(e)))return e}function Fn(e,t){if("change"===e)return t}var jn=!1;if(Ft){var Hn;if(Ft){var Un="oninput"in document;if(!Un){var Bn=document.createElement("div");Bn.setAttribute("oninput","return;"),Un="function"==typeof Bn.oninput}Hn=Un}else Hn=!1;jn=Hn&&(!document.documentMode||9<document.documentMode)}function $n(){Rn&&(Rn.detachEvent("onpropertychange",Vn),In=Rn=null)}function Vn(e){if("value"===e.propertyName&&Dn(In)){var t=[];Mn(t,In,e,Lt(e)),At(An,t)}}function Wn(e,t,n){"focusin"===e?($n(),In=n,(Rn=t).attachEvent("onpropertychange",Vn)):"focusout"===e&&$n()}function qn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Dn(In)}function Qn(e,t){if("click"===e)return Dn(t)}function Gn(e,t){if("input"===e||"change"===e)return Dn(t)}var Kn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Yn(e,t){if(Kn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!Y.call(t,a)||!Kn(e[a],t[a]))return!1}return!0}function Xn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Zn(e,t){var n,r=Xn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xn(r)}}function Jn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Jn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function er(e){for(var t=pt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=pt((e=t.contentWindow).document)}return t}function tr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var nr=Ft&&"documentMode"in document&&11>=document.documentMode,rr=null,ar=null,lr=null,or=!1;function ir(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;or||null==rr||rr!==pt(r)||(r="selectionStart"in(r=rr)&&tr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},lr&&Yn(lr,r)||(lr=r,0<(r=Vc(ar,"onSelect")).length&&(t=new Jt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function ur(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:ur("Animation","AnimationEnd"),animationiteration:ur("Animation","AnimationIteration"),animationstart:ur("Animation","AnimationStart"),transitionrun:ur("Transition","TransitionRun"),transitionstart:ur("Transition","TransitionStart"),transitioncancel:ur("Transition","TransitionCancel"),transitionend:ur("Transition","TransitionEnd")},cr={},fr={};function dr(e){if(cr[e])return cr[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in fr)return cr[e]=n[t];return e}Ft&&(fr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var pr=dr("animationend"),mr=dr("animationiteration"),hr=dr("animationstart"),gr=dr("transitionrun"),vr=dr("transitionstart"),yr=dr("transitioncancel"),br=dr("transitionend"),kr=new Map,wr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Sr(e,t){kr.set(e,t),Ge(t,[e])}wr.push("scrollEnd");var Er=new WeakMap;function Cr(e,t){if("object"==typeof e&&null!==e){var n=Er.get(e);return void 0!==n?n:(t={value:e,source:t,stack:ut(t)},Er.set(e,t),t)}return{value:e,source:t,stack:ut(t)}}var _r=[],Pr=0,Tr=0;function xr(){for(var e=Pr,t=Tr=Pr=0;t<e;){var n=_r[t];_r[t++]=null;var r=_r[t];_r[t++]=null;var a=_r[t];_r[t++]=null;var l=_r[t];if(_r[t++]=null,null!==r&&null!==a){var o=r.pending;null===o?a.next=a:(a.next=o.next,o.next=a),r.pending=a}0!==l&&zr(n,a,l)}}function Or(e,t,n,r){_r[Pr++]=e,_r[Pr++]=t,_r[Pr++]=n,_r[Pr++]=r,Tr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Nr(e,t,n,r){return Or(e,t,n,r),Mr(e)}function Lr(e,t){return Or(e,null,null,t),Mr(e)}function zr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,l=e.return;null!==l;)l.childLanes|=n,null!==(r=l.alternate)&&(r.childLanes|=n),22===l.tag&&(null===(e=l.stateNode)||1&e._visibility||(a=!0)),e=l,l=l.return;return 3===e.tag?(l=e.stateNode,a&&null!==t&&(a=31-pe(n),null===(r=(e=l.hiddenUpdates)[a])?e[a]=[t]:r.push(t),t.lane=536870912|n),l):null}function Mr(e){if(50<zs)throw zs=0,Ms=null,Error(o(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Rr={};function Ir(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ar(e,t,n,r){return new Ir(e,t,n,r)}function Dr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fr(e,t){var n=e.alternate;return null===n?((n=Ar(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function jr(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Hr(e,t,n,r,a,l){var i=0;if(r=e,"function"==typeof e)Dr(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,B.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case T:return(e=Ar(31,n,t,a)).elementType=T,e.lanes=l,e;case g:return Ur(n.children,a,l,t);case v:i=8,a|=24;break;case y:return(e=Ar(12,n,t,2|a)).elementType=y,e.lanes=l,e;case E:return(e=Ar(13,n,t,a)).elementType=E,e.lanes=l,e;case C:return(e=Ar(19,n,t,a)).elementType=C,e.lanes=l,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case b:case w:i=10;break e;case k:i=9;break e;case S:i=11;break e;case _:i=14;break e;case P:i=16,r=null;break e}i=29,n=Error(o(130,null===e?"null":typeof e,"")),r=null}return(t=Ar(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Ur(e,t,n,r){return(e=Ar(7,e,r,t)).lanes=n,e}function Br(e,t,n){return(e=Ar(6,e,null,t)).lanes=n,e}function $r(e,t,n){return(t=Ar(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Vr=[],Wr=0,qr=null,Qr=0,Gr=[],Kr=0,Yr=null,Xr=1,Zr="";function Jr(e,t){Vr[Wr++]=Qr,Vr[Wr++]=qr,qr=e,Qr=t}function ea(e,t,n){Gr[Kr++]=Xr,Gr[Kr++]=Zr,Gr[Kr++]=Yr,Yr=e;var r=Xr;e=Zr;var a=32-pe(r)-1;r&=~(1<<a),n+=1;var l=32-pe(t)+a;if(30<l){var o=a-a%5;l=(r&(1<<o)-1).toString(32),r>>=o,a-=o,Xr=1<<32-pe(t)+a|n<<a|r,Zr=l+e}else Xr=1<<l|n<<a|r,Zr=e}function ta(e){null!==e.return&&(Jr(e,1),ea(e,1,0))}function na(e){for(;e===qr;)qr=Vr[--Wr],Vr[Wr]=null,Qr=Vr[--Wr],Vr[Wr]=null;for(;e===Yr;)Yr=Gr[--Kr],Gr[Kr]=null,Zr=Gr[--Kr],Gr[Kr]=null,Xr=Gr[--Kr],Gr[Kr]=null}var ra=null,aa=null,la=!1,oa=null,ia=!1,ua=Error(o(519));function sa(e){throw ha(Cr(Error(o(418,"")),e)),ua}function ca(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[ze]=e,t[Me]=r,n){case"dialog":Dc("cancel",t),Dc("close",t);break;case"iframe":case"object":case"embed":Dc("load",t);break;case"video":case"audio":for(n=0;n<Rc.length;n++)Dc(Rc[n],t);break;case"source":Dc("error",t);break;case"img":case"image":case"link":Dc("error",t),Dc("load",t);break;case"details":Dc("toggle",t);break;case"input":Dc("invalid",t),vt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ft(t);break;case"select":Dc("invalid",t);break;case"textarea":Dc("invalid",t),wt(t,r.value,r.defaultValue,r.children),ft(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Yc(t.textContent,n)?(null!=r.popover&&(Dc("beforetoggle",t),Dc("toggle",t)),null!=r.onScroll&&Dc("scroll",t),null!=r.onScrollEnd&&Dc("scrollend",t),null!=r.onClick&&(t.onclick=Xc),t=!0):t=!1,t||sa(e)}function fa(e){for(ra=e.return;ra;)switch(ra.tag){case 5:case 13:return void(ia=!1);case 27:case 3:return void(ia=!0);default:ra=ra.return}}function da(e){if(e!==ra)return!1;if(!la)return fa(e),la=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||of(e.type,e.memoizedProps)),t=!t),t&&aa&&sa(e),fa(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){aa=yf(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}aa=null}}else 27===n?(n=aa,mf(e.type)?(e=bf,bf=null,aa=e):aa=n):aa=ra?yf(e.stateNode.nextSibling):null;return!0}function pa(){aa=ra=null,la=!1}function ma(){var e=oa;return null!==e&&(null===bs?bs=e:bs.push.apply(bs,e),oa=null),e}function ha(e){null===oa?oa=[e]:oa.push(e)}var ga=j(null),va=null,ya=null;function ba(e,t,n){U(ga,t._currentValue),t._currentValue=n}function ka(e){e._currentValue=ga.current,H(ga)}function wa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Sa(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var l=a.dependencies;if(null!==l){var i=a.child;l=l.firstContext;e:for(;null!==l;){var u=l;l=a;for(var s=0;s<t.length;s++)if(u.context===t[s]){l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),wa(l.return,n,e),r||(i=null);break e}l=u.next}}else if(18===a.tag){if(null===(i=a.return))throw Error(o(341));i.lanes|=n,null!==(l=i.alternate)&&(l.lanes|=n),wa(i,n,e),i=null}else i=a.child;if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===e){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}}function Ea(e,t,n,r){e=null;for(var a=t,l=!1;null!==a;){if(!l)if(524288&a.flags)l=!0;else if(262144&a.flags)break;if(10===a.tag){var i=a.alternate;if(null===i)throw Error(o(387));if(null!==(i=i.memoizedProps)){var u=a.type;Kn(a.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(a===W.current){if(null===(i=a.alternate))throw Error(o(387));i.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(Kf):e=[Kf])}a=a.return}null!==e&&Sa(t,e,n,r),t.flags|=262144}function Ca(e){for(e=e.firstContext;null!==e;){if(!Kn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function _a(e){va=e,ya=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Pa(e){return xa(va,e)}function Ta(e,t){return null===va&&_a(e),xa(e,t)}function xa(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===ya){if(null===e)throw Error(o(308));ya=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else ya=ya.next=t;return n}var Oa="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Na=r.unstable_scheduleCallback,La=r.unstable_NormalPriority,za={$$typeof:w,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Ma(){return{controller:new Oa,data:new Map,refCount:0}}function Ra(e){e.refCount--,0===e.refCount&&Na(La,(function(){e.controller.abort()}))}var Ia=null,Aa=0,Da=0,Fa=null;function ja(){if(0==--Aa&&null!==Ia){null!==Fa&&(Fa.status="fulfilled");var e=Ia;Ia=null,Da=0,Fa=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Ha=R.S;R.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ia){var n=Ia=[];Aa=0,Da=Oc(),Fa={status:"pending",value:void 0,then:function(e){n.push(e)}}}Aa++,t.then(ja,ja)}(0,t),null!==Ha&&Ha(e,t)};var Ua=j(null);function Ba(){var e=Ua.current;return null!==e?e:rs.pooledCache}function $a(e,t){U(Ua,null===t?Ua.current:t.pool)}function Va(){var e=Ba();return null===e?null:{parent:za._currentValue,pool:e}}var Wa=Error(o(460)),qa=Error(o(474)),Qa=Error(o(542)),Ga={then:function(){}};function Ka(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Ya(){}function Xa(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Ya,Ya),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw el(e=t.reason),e;default:if("string"==typeof t.status)t.then(Ya,Ya);else{if(null!==(e=rs)&&100<e.shellSuspendCounter)throw Error(o(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw el(e=t.reason),e}throw Za=t,Wa}}var Za=null;function Ja(){if(null===Za)throw Error(o(459));var e=Za;return Za=null,e}function el(e){if(e===Wa||e===Qa)throw Error(o(483))}var tl=!1;function nl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function rl(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function al(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function ll(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&ns){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=Mr(e),zr(e,null,n),t}return Or(e,r,t,n),Mr(e)}function ol(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Te(e,n)}}function il(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var o={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===l?a=l=o:l=l.next=o,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var ul=!1;function sl(){if(ul&&null!==Fa)throw Fa}function cl(e,t,n,r){ul=!1;var a=e.updateQueue;tl=!1;var l=a.firstBaseUpdate,o=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===o?l=s:o.next=s,o=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==l){var f=a.baseState;for(o=0,c=s=u=null,i=l;;){var p=-536870913&i.lane,m=p!==i.lane;if(m?(ls&p)===p:(r&p)===p){0!==p&&p===Da&&(ul=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var h=e,g=i;p=t;var v=n;switch(g.tag){case 1:if("function"==typeof(h=g.payload)){f=h.call(v,f,p);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=g.payload)?h.call(v,f,p):h))break e;f=d({},f,p);break e;case 2:tl=!0}}null!==(p=i.callback)&&(e.flags|=64,m&&(e.flags|=8192),null===(m=a.callbacks)?a.callbacks=[p]:m.push(p))}else m={lane:p,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=m,u=f):c=c.next=m,o|=p;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(m=i).next,m.next=null,a.lastBaseUpdate=m,a.shared.pending=null}}null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null===l&&(a.shared.lanes=0),ps|=o,e.lanes=o,e.memoizedState=f}}function fl(e,t){if("function"!=typeof e)throw Error(o(191,e));e.call(t)}function dl(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)fl(n[e],t)}var pl=j(null),ml=j(0);function hl(e,t){U(ml,e=fs),U(pl,t),fs=e|t.baseLanes}function gl(){U(ml,fs),U(pl,pl.current)}function vl(){fs=ml.current,H(pl),H(ml)}var yl=0,bl=null,kl=null,wl=null,Sl=!1,El=!1,Cl=!1,_l=0,Pl=0,Tl=null,xl=0;function Ol(){throw Error(o(321))}function Nl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Kn(e[n],t[n]))return!1;return!0}function Ll(e,t,n,r,a,l){return yl=l,bl=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,R.H=null===e||null===e.memoizedState?qo:Qo,Cl=!1,l=n(r,a),Cl=!1,El&&(l=Ml(t,n,r,a)),zl(e),l}function zl(e){R.H=Wo;var t=null!==kl&&null!==kl.next;if(yl=0,wl=kl=bl=null,Sl=!1,Pl=0,Tl=null,t)throw Error(o(300));null===e||Ti||null!==(e=e.dependencies)&&Ca(e)&&(Ti=!0)}function Ml(e,t,n,r){bl=e;var a=0;do{if(El&&(Tl=null),Pl=0,El=!1,25<=a)throw Error(o(301));if(a+=1,wl=kl=null,null!=e.updateQueue){var l=e.updateQueue;l.lastEffect=null,l.events=null,l.stores=null,null!=l.memoCache&&(l.memoCache.index=0)}R.H=Go,l=t(n,r)}while(El);return l}function Rl(){var e=R.H,t=e.useState()[0];return t="function"==typeof t.then?Hl(t):t,e=e.useState()[0],(null!==kl?kl.memoizedState:null)!==e&&(bl.flags|=1024),t}function Il(){var e=0!==_l;return _l=0,e}function Al(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function Dl(e){if(Sl){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}Sl=!1}yl=0,wl=kl=bl=null,El=!1,Pl=_l=0,Tl=null}function Fl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===wl?bl.memoizedState=wl=e:wl=wl.next=e,wl}function jl(){if(null===kl){var e=bl.alternate;e=null!==e?e.memoizedState:null}else e=kl.next;var t=null===wl?bl.memoizedState:wl.next;if(null!==t)wl=t,kl=e;else{if(null===e){if(null===bl.alternate)throw Error(o(467));throw Error(o(310))}e={memoizedState:(kl=e).memoizedState,baseState:kl.baseState,baseQueue:kl.baseQueue,queue:kl.queue,next:null},null===wl?bl.memoizedState=wl=e:wl=wl.next=e}return wl}function Hl(e){var t=Pl;return Pl+=1,null===Tl&&(Tl=[]),e=Xa(Tl,e,t),t=bl,null===(null===wl?t.memoizedState:wl.next)&&(t=t.alternate,R.H=null===t||null===t.memoizedState?qo:Qo),e}function Ul(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Hl(e);if(e.$$typeof===w)return Pa(e)}throw Error(o(438,String(e)))}function Bl(e){var t=null,n=bl.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=bl.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},bl.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=x;return t.index++,n}function $l(e,t){return"function"==typeof t?t(e):t}function Vl(e){return Wl(jl(),kl,e)}function Wl(e,t,n){var r=e.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=n;var a=e.baseQueue,l=r.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}t.baseQueue=a=l,r.pending=null}if(l=e.baseState,null===a)e.memoizedState=l;else{var u=i=null,s=null,c=t=a.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(ls&d)===d:(yl&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===Da&&(f=!0);else{if((yl&p)===p){c=c.next,p===Da&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,i=l):s=s.next=d,bl.lanes|=p,ps|=p}d=c.action,Cl&&n(l,d),l=c.hasEagerState?c.eagerState:n(l,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,i=l):s=s.next=p,bl.lanes|=d,ps|=d;c=c.next}while(null!==c&&c!==t);if(null===s?i=l:s.next=u,!Kn(l,e.memoizedState)&&(Ti=!0,f&&null!==(n=Fa)))throw n;e.memoizedState=l,e.baseState=i,e.baseQueue=s,r.lastRenderedState=l}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function ql(e){var t=jl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);Kn(l,t.memoizedState)||(Ti=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function Ql(e,t,n){var r=bl,a=jl(),l=la;if(l){if(void 0===n)throw Error(o(407));n=n()}else n=t();var i=!Kn((kl||a).memoizedState,n);if(i&&(a.memoizedState=n,Ti=!0),a=a.queue,vo(2048,8,Yl.bind(null,r,a,e),[e]),a.getSnapshot!==t||i||null!==wl&&1&wl.memoizedState.tag){if(r.flags|=2048,mo(9,{destroy:void 0,resource:void 0},Kl.bind(null,r,a,n,t),null),null===rs)throw Error(o(349));l||124&yl||Gl(r,t,n)}return n}function Gl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=bl.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},bl.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Kl(e,t,n,r){t.value=n,t.getSnapshot=r,Xl(t)&&Zl(e)}function Yl(e,t,n){return n((function(){Xl(t)&&Zl(e)}))}function Xl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Kn(e,n)}catch(e){return!0}}function Zl(e){var t=Lr(e,2);null!==t&&As(t,0,2)}function Jl(e){var t=Fl();if("function"==typeof e){var n=e;if(e=n(),Cl){de(!0);try{n()}finally{de(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:$l,lastRenderedState:e},t}function eo(e,t,n,r){return e.baseState=n,Wl(e,kl,"function"==typeof r?r:$l)}function to(e,t,n,r,a){if(Bo(e))throw Error(o(485));if(null!==(e=t.action)){var l={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){l.listeners.push(e)}};null!==R.T?n(!0):l.isTransition=!1,r(l),null===(n=t.pending)?(l.next=t.pending=l,no(t,l)):(l.next=n.next,t.pending=n.next=l)}}function no(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var l=R.T,o={};R.T=o;try{var i=n(a,r),u=R.S;null!==u&&u(o,i),ro(e,t,i)}catch(n){lo(e,t,n)}finally{R.T=l}}else try{ro(e,t,l=n(a,r))}catch(n){lo(e,t,n)}}function ro(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){ao(e,t,n)}),(function(n){return lo(e,t,n)})):ao(e,t,n)}function ao(e,t,n){t.status="fulfilled",t.value=n,oo(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,no(e,n)))}function lo(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,oo(t),t=t.next}while(t!==r)}e.action=null}function oo(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function io(e,t){return t}function uo(e,t){if(la){var n=rs.formState;if(null!==n){e:{var r=bl;if(la){if(aa){t:{for(var a=aa,l=ia;8!==a.nodeType;){if(!l){a=null;break t}if(null===(a=yf(a.nextSibling))){a=null;break t}}a="F!"===(l=a.data)||"F"===l?a:null}if(a){aa=yf(a.nextSibling),r="F!"===a.data;break e}}sa(r)}r=!1}r&&(t=n[0])}}return(n=Fl()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:io,lastRenderedState:t},n.queue=r,n=jo.bind(null,bl,r),r.dispatch=n,r=Jl(!1),l=Uo.bind(null,bl,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=Fl()).queue=a,n=to.bind(null,bl,a,l,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function so(e){return co(jl(),kl,e)}function co(e,t,n){if(t=Wl(e,t,io)[0],e=Vl($l)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Hl(t)}catch(e){if(e===Wa)throw Qa;throw e}else r=t;var a=(t=jl()).queue,l=a.dispatch;return n!==t.memoizedState&&(bl.flags|=2048,mo(9,{destroy:void 0,resource:void 0},fo.bind(null,a,n),null)),[r,l,e]}function fo(e,t){e.action=t}function po(e){var t=jl(),n=kl;if(null!==n)return co(t,n,e);jl(),t=t.memoizedState;var r=(n=jl()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function mo(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=bl.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},bl.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ho(){return jl().memoizedState}function go(e,t,n,r){var a=Fl();r=void 0===r?null:r,bl.flags|=e,a.memoizedState=mo(1|t,{destroy:void 0,resource:void 0},n,r)}function vo(e,t,n,r){var a=jl();r=void 0===r?null:r;var l=a.memoizedState.inst;null!==kl&&null!==r&&Nl(r,kl.memoizedState.deps)?a.memoizedState=mo(t,l,n,r):(bl.flags|=e,a.memoizedState=mo(1|t,l,n,r))}function yo(e,t){go(8390656,8,e,t)}function bo(e,t){vo(2048,8,e,t)}function ko(e,t){return vo(4,2,e,t)}function wo(e,t){return vo(4,4,e,t)}function So(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function Eo(e,t,n){n=null!=n?n.concat([e]):null,vo(4,4,So.bind(null,t,e),n)}function Co(){}function _o(e,t){var n=jl();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&Nl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Po(e,t){var n=jl();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&Nl(t,r[1]))return r[0];if(r=e(),Cl){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r}function To(e,t,n){return void 0===n||1073741824&yl?e.memoizedState=t:(e.memoizedState=n,e=Is(),bl.lanes|=e,ps|=e,n)}function xo(e,t,n,r){return Kn(n,t)?n:null!==pl.current?(e=To(e,n,r),Kn(e,t)||(Ti=!0),e):42&yl?(e=Is(),bl.lanes|=e,ps|=e,t):(Ti=!0,e.memoizedState=n)}function Oo(e,t,n,r,a){var l=I.p;I.p=0!==l&&8>l?l:8;var o,i,u,s=R.T,c={};R.T=c,Uo(e,!1,t,n);try{var f=a(),d=R.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?Ho(e,t,(o=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){u.status="fulfilled",u.value=o;for(var e=0;e<i.length;e++)(0,i[e])(o)}),(function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),u),Rs()):Ho(e,t,r,Rs())}catch(n){Ho(e,t,{then:function(){},status:"rejected",reason:n},Rs())}finally{I.p=l,R.T=s}}function No(){}function Lo(e,t,n,r){if(5!==e.tag)throw Error(o(476));var a=zo(e).queue;Oo(e,a,t,A,null===n?No:function(){return Mo(e),n(r)})}function zo(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:A,baseState:A,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:$l,lastRenderedState:A},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:$l,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function Mo(e){Ho(e,zo(e).next.queue,{},Rs())}function Ro(){return Pa(Kf)}function Io(){return jl().memoizedState}function Ao(){return jl().memoizedState}function Do(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Rs(),r=ll(t,e=al(n),n);return null!==r&&(As(r,0,n),ol(r,t,n)),t={cache:Ma()},void(e.payload=t)}t=t.return}}function Fo(e,t,n){var r=Rs();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Bo(e)?$o(t,n):null!==(n=Nr(e,t,n,r))&&(As(n,0,r),Vo(n,t,r))}function jo(e,t,n){Ho(e,t,n,Rs())}function Ho(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Bo(e))$o(t,a);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=l(o,n);if(a.hasEagerState=!0,a.eagerState=i,Kn(i,o))return Or(e,t,a,0),null===rs&&xr(),!1}catch(e){}if(null!==(n=Nr(e,t,a,r)))return As(n,0,r),Vo(n,t,r),!0}return!1}function Uo(e,t,n,r){if(r={lane:2,revertLane:Oc(),action:r,hasEagerState:!1,eagerState:null,next:null},Bo(e)){if(t)throw Error(o(479))}else null!==(t=Nr(e,n,r,2))&&As(t,0,2)}function Bo(e){var t=e.alternate;return e===bl||null!==t&&t===bl}function $o(e,t){El=Sl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Vo(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Te(e,n)}}var Wo={readContext:Pa,use:Ul,useCallback:Ol,useContext:Ol,useEffect:Ol,useImperativeHandle:Ol,useLayoutEffect:Ol,useInsertionEffect:Ol,useMemo:Ol,useReducer:Ol,useRef:Ol,useState:Ol,useDebugValue:Ol,useDeferredValue:Ol,useTransition:Ol,useSyncExternalStore:Ol,useId:Ol,useHostTransitionStatus:Ol,useFormState:Ol,useActionState:Ol,useOptimistic:Ol,useMemoCache:Ol,useCacheRefresh:Ol},qo={readContext:Pa,use:Ul,useCallback:function(e,t){return Fl().memoizedState=[e,void 0===t?null:t],e},useContext:Pa,useEffect:yo,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,go(4194308,4,So.bind(null,t,e),n)},useLayoutEffect:function(e,t){return go(4194308,4,e,t)},useInsertionEffect:function(e,t){go(4,2,e,t)},useMemo:function(e,t){var n=Fl();t=void 0===t?null:t;var r=e();if(Cl){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Fl();if(void 0!==n){var a=n(t);if(Cl){de(!0);try{n(t)}finally{de(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=Fo.bind(null,bl,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Fl().memoizedState=e},useState:function(e){var t=(e=Jl(e)).queue,n=jo.bind(null,bl,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:Co,useDeferredValue:function(e,t){return To(Fl(),e,t)},useTransition:function(){var e=Jl(!1);return e=Oo.bind(null,bl,e.queue,!0,!1),Fl().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=bl,a=Fl();if(la){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===rs)throw Error(o(349));124&ls||Gl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,yo(Yl.bind(null,r,l,e),[e]),r.flags|=2048,mo(9,{destroy:void 0,resource:void 0},Kl.bind(null,r,l,n,t),null),n},useId:function(){var e=Fl(),t=rs.identifierPrefix;if(la){var n=Zr;t="«"+t+"R"+(n=(Xr&~(1<<32-pe(Xr)-1)).toString(32)+n),0<(n=_l++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=xl++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:Ro,useFormState:uo,useActionState:uo,useOptimistic:function(e){var t=Fl();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Uo.bind(null,bl,!0,n),n.dispatch=t,[e,t]},useMemoCache:Bl,useCacheRefresh:function(){return Fl().memoizedState=Do.bind(null,bl)}},Qo={readContext:Pa,use:Ul,useCallback:_o,useContext:Pa,useEffect:bo,useImperativeHandle:Eo,useInsertionEffect:ko,useLayoutEffect:wo,useMemo:Po,useReducer:Vl,useRef:ho,useState:function(){return Vl($l)},useDebugValue:Co,useDeferredValue:function(e,t){return xo(jl(),kl.memoizedState,e,t)},useTransition:function(){var e=Vl($l)[0],t=jl().memoizedState;return["boolean"==typeof e?e:Hl(e),t]},useSyncExternalStore:Ql,useId:Io,useHostTransitionStatus:Ro,useFormState:so,useActionState:so,useOptimistic:function(e,t){return eo(jl(),0,e,t)},useMemoCache:Bl,useCacheRefresh:Ao},Go={readContext:Pa,use:Ul,useCallback:_o,useContext:Pa,useEffect:bo,useImperativeHandle:Eo,useInsertionEffect:ko,useLayoutEffect:wo,useMemo:Po,useReducer:ql,useRef:ho,useState:function(){return ql($l)},useDebugValue:Co,useDeferredValue:function(e,t){var n=jl();return null===kl?To(n,e,t):xo(n,kl.memoizedState,e,t)},useTransition:function(){var e=ql($l)[0],t=jl().memoizedState;return["boolean"==typeof e?e:Hl(e),t]},useSyncExternalStore:Ql,useId:Io,useHostTransitionStatus:Ro,useFormState:po,useActionState:po,useOptimistic:function(e,t){var n=jl();return null!==kl?eo(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:Bl,useCacheRefresh:Ao},Ko=null,Yo=0;function Xo(e){var t=Yo;return Yo+=1,null===Ko&&(Ko=[]),Xa(Ko,e,t)}function Zo(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Jo(e,t){if(t.$$typeof===p)throw Error(o(525));throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ei(e){return(0,e._init)(e._payload)}function ti(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=Fr(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Br(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var l=n.type;return l===g?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===P&&ei(l)===t.type)?(Zo(t=a(t,n.props),n),t.return=e,t):(Zo(t=Hr(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$r(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,l){return null===t||7!==t.tag?((t=Ur(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Br(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case m:return Zo(n=Hr(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case h:return(t=$r(t,e.mode,n)).return=e,t;case P:return d(e,t=(0,t._init)(t._payload),n)}if(M(t)||N(t))return(t=Ur(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return d(e,Xo(t),n);if(t.$$typeof===w)return d(e,Ta(e,t),n);Jo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case m:return n.key===a?s(e,t,n,r):null;case h:return n.key===a?c(e,t,n,r):null;case P:return p(e,t,n=(a=n._init)(n._payload),r)}if(M(n)||N(n))return null!==a?null:f(e,t,n,r,null);if("function"==typeof n.then)return p(e,t,Xo(n),r);if(n.$$typeof===w)return p(e,t,Ta(e,n),r);Jo(e,n)}return null}function v(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case m:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case h:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case P:return v(e,t,n,r=(0,r._init)(r._payload),a)}if(M(r)||N(r))return f(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return v(e,t,n,Xo(r),a);if(r.$$typeof===w)return v(e,t,n,Ta(t,r),a);Jo(t,r)}return null}function y(u,s,c,f){if("object"==typeof c&&null!==c&&c.type===g&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case m:e:{for(var b=c.key;null!==s;){if(s.key===b){if((b=c.type)===g){if(7===s.tag){n(u,s.sibling),(f=a(s,c.props.children)).return=u,u=f;break e}}else if(s.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===P&&ei(b)===s.type){n(u,s.sibling),Zo(f=a(s,c.props),c),f.return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}c.type===g?((f=Ur(c.props.children,u.mode,f,c.key)).return=u,u=f):(Zo(f=Hr(c.type,c.key,c.props,null,u.mode,f),c),f.return=u,u=f)}return i(u);case h:e:{for(b=c.key;null!==s;){if(s.key===b){if(4===s.tag&&s.stateNode.containerInfo===c.containerInfo&&s.stateNode.implementation===c.implementation){n(u,s.sibling),(f=a(s,c.children||[])).return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}(f=$r(c,u.mode,f)).return=u,u=f}return i(u);case P:return y(u,s,c=(b=c._init)(c._payload),f)}if(M(c))return function(a,o,i,u){for(var s=null,c=null,f=o,m=o=0,h=null;null!==f&&m<i.length;m++){f.index>m?(h=f,f=null):h=f.sibling;var g=p(a,f,i[m],u);if(null===g){null===f&&(f=h);break}e&&f&&null===g.alternate&&t(a,f),o=l(g,o,m),null===c?s=g:c.sibling=g,c=g,f=h}if(m===i.length)return n(a,f),la&&Jr(a,m),s;if(null===f){for(;m<i.length;m++)null!==(f=d(a,i[m],u))&&(o=l(f,o,m),null===c?s=f:c.sibling=f,c=f);return la&&Jr(a,m),s}for(f=r(f);m<i.length;m++)null!==(h=v(f,a,m,i[m],u))&&(e&&null!==h.alternate&&f.delete(null===h.key?m:h.key),o=l(h,o,m),null===c?s=h:c.sibling=h,c=h);return e&&f.forEach((function(e){return t(a,e)})),la&&Jr(a,m),s}(u,s,c,f);if(N(c)){if("function"!=typeof(b=N(c)))throw Error(o(150));return function(a,i,u,s){if(null==u)throw Error(o(151));for(var c=null,f=null,m=i,h=i=0,g=null,y=u.next();null!==m&&!y.done;h++,y=u.next()){m.index>h?(g=m,m=null):g=m.sibling;var b=p(a,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(a,m),i=l(b,i,h),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(a,m),la&&Jr(a,h),c;if(null===m){for(;!y.done;h++,y=u.next())null!==(y=d(a,y.value,s))&&(i=l(y,i,h),null===f?c=y:f.sibling=y,f=y);return la&&Jr(a,h),c}for(m=r(m);!y.done;h++,y=u.next())null!==(y=v(m,a,h,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?h:y.key),i=l(y,i,h),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(a,e)})),la&&Jr(a,h),c}(u,s,c=b.call(c),f)}if("function"==typeof c.then)return y(u,s,Xo(c),f);if(c.$$typeof===w)return y(u,s,Ta(u,c),f);Jo(u,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==s&&6===s.tag?(n(u,s.sibling),(f=a(s,c)).return=u,u=f):(n(u,s),(f=Br(c,u.mode,f)).return=u,u=f),i(u)):n(u,s)}return function(e,t,n,r){try{Yo=0;var a=y(e,t,n,r);return Ko=null,a}catch(t){if(t===Wa||t===Qa)throw t;var l=Ar(29,t,null,e.mode);return l.lanes=r,l.return=e,l}}}var ni=ti(!0),ri=ti(!1),ai=j(null),li=null;function oi(e){var t=e.alternate;U(ci,1&ci.current),U(ai,e),null===li&&(null===t||null!==pl.current||null!==t.memoizedState)&&(li=e)}function ii(e){if(22===e.tag){if(U(ci,ci.current),U(ai,e),null===li){var t=e.alternate;null!==t&&null!==t.memoizedState&&(li=e)}}else ui()}function ui(){U(ci,ci.current),U(ai,ai.current)}function si(e){H(ai),li===e&&(li=null),H(ci)}var ci=j(0);function fi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||vf(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function di(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:d({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pi={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Rs(),a=al(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=ll(e,a,r))&&(As(t,0,r),ol(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Rs(),a=al(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=ll(e,a,r))&&(As(t,0,r),ol(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Rs(),r=al(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=ll(e,r,n))&&(As(t,0,n),ol(t,e,n))}};function mi(e,t,n,r,a,l,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,o):!(t.prototype&&t.prototype.isPureReactComponent&&Yn(n,r)&&Yn(a,l))}function hi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function gi(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=d({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var vi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function yi(e){vi(e)}function bi(e){console.error(e)}function ki(e){vi(e)}function wi(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Si(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Ei(e,t,n){return(n=al(n)).tag=3,n.payload={element:null},n.callback=function(){wi(e,t)},n}function Ci(e){return(e=al(e)).tag=3,e}function _i(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var l=r.value;e.payload=function(){return a(l)},e.callback=function(){Si(t,n,r)}}var o=n.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){Si(t,n,r),"function"!=typeof a&&(null===Cs?Cs=new Set([this]):Cs.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Pi=Error(o(461)),Ti=!1;function xi(e,t,n,r){t.child=null===e?ri(t,null,n,r):ni(t,e.child,n,r)}function Oi(e,t,n,r,a){n=n.render;var l=t.ref;if("ref"in r){var o={};for(var i in r)"ref"!==i&&(o[i]=r[i])}else o=r;return _a(t),r=Ll(e,t,n,o,l,a),i=Il(),null===e||Ti?(la&&i&&ta(t),t.flags|=1,xi(e,t,r,a),t.child):(Al(e,t,a),Ki(e,t,a))}function Ni(e,t,n,r,a){if(null===e){var l=n.type;return"function"!=typeof l||Dr(l)||void 0!==l.defaultProps||null!==n.compare?((e=Hr(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,Li(e,t,l,r,a))}if(l=e.child,!Yi(e,a)){var o=l.memoizedProps;if((n=null!==(n=n.compare)?n:Yn)(o,r)&&e.ref===t.ref)return Ki(e,t,a)}return t.flags|=1,(e=Fr(l,r)).ref=t.ref,e.return=t,t.child=e}function Li(e,t,n,r,a){if(null!==e){var l=e.memoizedProps;if(Yn(l,r)&&e.ref===t.ref){if(Ti=!1,t.pendingProps=r=l,!Yi(e,a))return t.lanes=e.lanes,Ki(e,t,a);131072&e.flags&&(Ti=!0)}}return Ii(e,t,n,r,a)}function zi(e,t,n){var r=t.pendingProps,a=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==l?l.baseLanes|n:n,null!==e){for(a=t.child=e.child,l=0;null!==a;)l=l|a.lanes|a.childLanes,a=a.sibling;t.childLanes=l&~r}else t.childLanes=0,t.child=null;return Mi(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Mi(e,t,null!==l?l.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&$a(0,null!==l?l.cachePool:null),null!==l?hl(t,l):gl(),ii(t)}else null!==l?($a(0,l.cachePool),hl(t,l),ui(),t.memoizedState=null):(null!==e&&$a(0,null),gl(),ui());return xi(e,t,a,n),t.child}function Mi(e,t,n,r){var a=Ba();return a=null===a?null:{parent:za._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&$a(0,null),gl(),ii(t),null!==e&&Ea(e,t,r,!0),null}function Ri(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(o(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function Ii(e,t,n,r,a){return _a(t),n=Ll(e,t,n,r,void 0,a),r=Il(),null===e||Ti?(la&&r&&ta(t),t.flags|=1,xi(e,t,n,a),t.child):(Al(e,t,a),Ki(e,t,a))}function Ai(e,t,n,r,a,l){return _a(t),t.updateQueue=null,n=Ml(t,r,n,a),zl(e),r=Il(),null===e||Ti?(la&&r&&ta(t),t.flags|=1,xi(e,t,n,l),t.child):(Al(e,t,l),Ki(e,t,l))}function Di(e,t,n,r,a){if(_a(t),null===t.stateNode){var l=Rr,o=n.contextType;"object"==typeof o&&null!==o&&(l=Pa(o)),l=new n(r,l),t.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,l.updater=pi,t.stateNode=l,l._reactInternals=t,(l=t.stateNode).props=r,l.state=t.memoizedState,l.refs={},nl(t),o=n.contextType,l.context="object"==typeof o&&null!==o?Pa(o):Rr,l.state=t.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(di(t,n,o,r),l.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||(o=l.state,"function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),o!==l.state&&pi.enqueueReplaceState(l,l.state,null),cl(t,r,l,a),sl(),l.state=t.memoizedState),"function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){l=t.stateNode;var i=t.memoizedProps,u=gi(n,i);l.props=u;var s=l.context,c=n.contextType;o=Rr,"object"==typeof c&&null!==c&&(o=Pa(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i||s!==o)&&hi(t,l,r,o),tl=!1;var d=t.memoizedState;l.state=d,cl(t,r,l,a),sl(),s=t.memoizedState,i||d!==s||tl?("function"==typeof f&&(di(t,n,f,r),s=t.memoizedState),(u=tl||mi(t,n,u,r,d,s,o))?(c||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),l.props=r,l.state=s,l.context=o,r=u):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,rl(e,t),c=gi(n,o=t.memoizedProps),l.props=c,f=t.pendingProps,d=l.context,s=n.contextType,u=Rr,"object"==typeof s&&null!==s&&(u=Pa(s)),(s="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(o!==f||d!==u)&&hi(t,l,r,u),tl=!1,d=t.memoizedState,l.state=d,cl(t,r,l,a),sl();var p=t.memoizedState;o!==f||d!==p||tl||null!==e&&null!==e.dependencies&&Ca(e.dependencies)?("function"==typeof i&&(di(t,n,i,r),p=t.memoizedState),(c=tl||mi(t,n,c,r,d,p,u)||null!==e&&null!==e.dependencies&&Ca(e.dependencies))?(s||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,p,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),l.props=r,l.state=p,l.context=u,r=c):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return l=r,Ri(e,t),r=!!(128&t.flags),l||r?(l=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:l.render(),t.flags|=1,null!==e&&r?(t.child=ni(t,e.child,null,a),t.child=ni(t,null,n,a)):xi(e,t,n,a),t.memoizedState=l.state,e=t.child):e=Ki(e,t,a),e}function Fi(e,t,n,r){return pa(),t.flags|=256,xi(e,t,n,r),t.child}var ji={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Hi(e){return{baseLanes:e,cachePool:Va()}}function Ui(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=gs),e}function Bi(e,t,n){var r,a=t.pendingProps,l=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&ci.current)),r&&(l=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(la){if(l?oi(t):ui(),la){var u,s=aa;if(u=s){e:{for(u=s,s=ia;8!==u.nodeType;){if(!s){s=null;break e}if(null===(u=yf(u.nextSibling))){s=null;break e}}s=u}null!==s?(t.memoizedState={dehydrated:s,treeContext:null!==Yr?{id:Xr,overflow:Zr}:null,retryLane:536870912,hydrationErrors:null},(u=Ar(18,null,null,0)).stateNode=s,u.return=t,t.child=u,ra=t,aa=null,u=!0):u=!1}u||sa(t)}if(null!==(s=t.memoizedState)&&null!==(s=s.dehydrated))return vf(s)?t.lanes=32:t.lanes=536870912,null;si(t)}return s=a.children,a=a.fallback,l?(ui(),s=Vi({mode:"hidden",children:s},l=t.mode),a=Ur(a,l,n,null),s.return=t,a.return=t,s.sibling=a,t.child=s,(l=t.child).memoizedState=Hi(n),l.childLanes=Ui(e,r,n),t.memoizedState=ji,a):(oi(t),$i(t,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(i)256&t.flags?(oi(t),t.flags&=-257,t=Wi(e,t,n)):null!==t.memoizedState?(ui(),t.child=e.child,t.flags|=128,t=null):(ui(),l=a.fallback,s=t.mode,a=Vi({mode:"visible",children:a.children},s),(l=Ur(l,s,n,null)).flags|=2,a.return=t,l.return=t,a.sibling=l,t.child=a,ni(t,e.child,null,n),(a=t.child).memoizedState=Hi(n),a.childLanes=Ui(e,r,n),t.memoizedState=ji,t=l);else if(oi(t),vf(s)){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(a=Error(o(419))).stack="",a.digest=r,ha({value:a,source:null,stack:null}),t=Wi(e,t,n)}else if(Ti||Ea(e,t,n,!1),r=!!(n&e.childLanes),Ti||r){if(null!==(r=rs)&&0!==(a=(a=42&(a=n&-n)?1:xe(a))&(r.suspendedLanes|n)?0:a)&&a!==u.retryLane)throw u.retryLane=a,Lr(e,a),As(r,0,a),Pi;"$?"===s.data||Qs(),t=Wi(e,t,n)}else"$?"===s.data?(t.flags|=192,t.child=e.child,t=null):(e=u.treeContext,aa=yf(s.nextSibling),ra=t,la=!0,oa=null,ia=!1,null!==e&&(Gr[Kr++]=Xr,Gr[Kr++]=Zr,Gr[Kr++]=Yr,Xr=e.id,Zr=e.overflow,Yr=t),(t=$i(t,a.children)).flags|=4096);return t}return l?(ui(),l=a.fallback,s=t.mode,c=(u=e.child).sibling,(a=Fr(u,{mode:"hidden",children:a.children})).subtreeFlags=65011712&u.subtreeFlags,null!==c?l=Fr(c,l):(l=Ur(l,s,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,null===(s=e.child.memoizedState)?s=Hi(n):(null!==(u=s.cachePool)?(c=za._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=Va(),s={baseLanes:s.baseLanes|n,cachePool:u}),l.memoizedState=s,l.childLanes=Ui(e,r,n),t.memoizedState=ji,a):(oi(t),e=(n=e.child).sibling,(n=Fr(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function $i(e,t){return(t=Vi({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Vi(e,t){return(e=Ar(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function Wi(e,t,n){return ni(t,e.child,null,n),(e=$i(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function qi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),wa(e.return,t,n)}function Qi(e,t,n,r,a){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a)}function Gi(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if(xi(e,t,r.children,n),2&(r=ci.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&qi(e,n,t);else if(19===e.tag)qi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(U(ci,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===fi(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Qi(t,!1,a,n,l);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===fi(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Qi(t,!0,n,null,l);break;case"together":Qi(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ki(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ps|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(Ea(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Fr(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fr(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Yi(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!Ca(e))}function Xi(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Ti=!0;else{if(!(Yi(e,n)||128&t.flags))return Ti=!1,function(e,t,n){switch(t.tag){case 3:q(t,t.stateNode.containerInfo),ba(0,za,e.memoizedState.cache),pa();break;case 27:case 5:G(t);break;case 4:q(t,t.stateNode.containerInfo);break;case 10:ba(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(oi(t),t.flags|=128,null):n&t.child.childLanes?Bi(e,t,n):(oi(t),null!==(e=Ki(e,t,n))?e.sibling:null);oi(t);break;case 19:var a=!!(128&e.flags);if((r=!!(n&t.childLanes))||(Ea(e,t,n,!1),r=!!(n&t.childLanes)),a){if(r)return Gi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),U(ci,ci.current),r)break;return null;case 22:case 23:return t.lanes=0,zi(e,t,n);case 24:ba(0,za,e.memoizedState.cache)}return Ki(e,t,n)}(e,t,n);Ti=!!(131072&e.flags)}else Ti=!1,la&&1048576&t.flags&&ea(t,Qr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===S){t.tag=11,t=Oi(null,t,r,e,n);break e}if(a===_){t.tag=14,t=Ni(null,t,r,e,n);break e}}throw t=z(r)||r,Error(o(306,t,""))}Dr(r)?(e=gi(r,e),t.tag=1,t=Di(null,t,r,e,n)):(t.tag=0,t=Ii(null,t,r,e,n))}return t;case 0:return Ii(e,t,t.type,t.pendingProps,n);case 1:return Di(e,t,r=t.type,a=gi(r,t.pendingProps),n);case 3:e:{if(q(t,t.stateNode.containerInfo),null===e)throw Error(o(387));r=t.pendingProps;var l=t.memoizedState;a=l.element,rl(e,t),cl(t,r,null,n);var i=t.memoizedState;if(r=i.cache,ba(0,za,r),r!==l.cache&&Sa(t,[za],n,!0),sl(),r=i.element,l.isDehydrated){if(l={element:r,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Fi(e,t,r,n);break e}if(r!==a){ha(a=Cr(Error(o(424)),t)),t=Fi(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,aa=yf(e.firstChild),ra=t,la=!0,oa=null,ia=!0,n=ri(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pa(),r===a){t=Ki(e,t,n);break e}xi(e,t,r,n)}t=t.child}return t;case 26:return Ri(e,t),null===e?(n=Of(t.type,null,t.pendingProps,null))?t.memoizedState=n:la||(n=t.type,e=t.pendingProps,(r=rf(V.current).createElement(n))[ze]=t,r[Me]=e,ef(r,n,e),We(r),t.stateNode=r):t.memoizedState=Of(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return G(t),null===e&&la&&(r=t.stateNode=wf(t.type,t.pendingProps,V.current),ra=t,ia=!0,a=aa,mf(t.type)?(bf=a,aa=yf(r.firstChild)):aa=a),xi(e,t,t.pendingProps.children,n),Ri(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&la&&((a=r=aa)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[je])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(l=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(l!==a.rel||e.getAttribute("href")!==(null==a.href||""===a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((l=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&l&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var l=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===l)return e}if(null===(e=yf(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,ia))?(t.stateNode=r,ra=t,aa=yf(r.firstChild),ia=!1,a=!0):a=!1),a||sa(t)),G(t),a=t.type,l=t.pendingProps,i=null!==e?e.memoizedProps:null,r=l.children,of(a,l)?r=null:null!==i&&of(a,i)&&(t.flags|=32),null!==t.memoizedState&&(a=Ll(e,t,Rl,null,null,n),Kf._currentValue=a),Ri(e,t),xi(e,t,r,n),t.child;case 6:return null===e&&la&&((e=n=aa)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=yf(e.nextSibling)))return null}return e}(n,t.pendingProps,ia))?(t.stateNode=n,ra=t,aa=null,e=!0):e=!1),e||sa(t)),null;case 13:return Bi(e,t,n);case 4:return q(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ni(t,null,r,n):xi(e,t,r,n),t.child;case 11:return Oi(e,t,t.type,t.pendingProps,n);case 7:return xi(e,t,t.pendingProps,n),t.child;case 8:case 12:return xi(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,ba(0,t.type,r.value),xi(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,_a(t),r=r(a=Pa(a)),t.flags|=1,xi(e,t,r,n),t.child;case 14:return Ni(e,t,t.type,t.pendingProps,n);case 15:return Li(e,t,t.type,t.pendingProps,n);case 19:return Gi(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Vi(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=Fr(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return zi(e,t,n);case 24:return _a(t),r=Pa(za),null===e?(null===(a=Ba())&&(a=rs,l=Ma(),a.pooledCache=l,l.refCount++,null!==l&&(a.pooledCacheLanes|=n),a=l),t.memoizedState={parent:r,cache:a},nl(t),ba(0,za,a)):(!!(e.lanes&n)&&(rl(e,t),cl(t,null,null,n),sl()),a=e.memoizedState,l=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),ba(0,za,r)):(r=l.cache,ba(0,za,r),r!==a.cache&&Sa(t,[za],n,!0))),xi(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(o(156,t.tag))}function Zi(e){e.flags|=4}function Ji(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Bf(t)){if(null!==(t=ai.current)&&((4194048&ls)===ls?null!==li:(62914560&ls)!==ls&&!(536870912&ls)||t!==li))throw Za=Ga,qa;e.flags|=8192}}function eu(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Ee():536870912,e.lanes|=t,vs|=t)}function tu(e,t){if(!la)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=65011712&a.subtreeFlags,r|=65011712&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ru(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return nu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),ka(za),Q(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(da(t)?Zi(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,ma())),nu(t),null;case 26:return n=t.memoizedState,null===e?(Zi(t),null!==n?(nu(t),Ji(t,n)):(nu(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Zi(t),nu(t),Ji(t,n)):(nu(t),t.flags&=-16777217):(e.memoizedProps!==r&&Zi(t),nu(t),t.flags&=-16777217),null;case 27:K(t),n=V.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Zi(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return nu(t),null}e=B.current,da(t)?ca(t):(e=wf(a,r,n),t.stateNode=e,Zi(t))}return nu(t),null;case 5:if(K(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Zi(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return nu(t),null}if(e=B.current,da(t))ca(t);else{switch(a=rf(V.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[ze]=t,e[Me]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(ef(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Zi(t)}}return nu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Zi(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=V.current,da(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=ra))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[ze]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Yc(e.nodeValue,n)))||sa(t)}else(e=rf(e).createTextNode(r))[ze]=t,t.stateNode=e}return nu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[ze]=t}else pa(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;nu(t),a=!1}else a=ma(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=a),a=!0;if(!a)return 256&t.flags?(si(t),t):(si(t),null)}if(si(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var l=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(l=r.memoizedState.cachePool.pool),l!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),eu(t,t.updateQueue),nu(t),null;case 4:return Q(),null===e&&Hc(t.stateNode.containerInfo),nu(t),null;case 10:return ka(t.type),nu(t),null;case 19:if(H(ci),null===(a=t.memoizedState))return nu(t),null;if(r=!!(128&t.flags),null===(l=a.rendering))if(r)tu(a,!1);else{if(0!==ds||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=fi(e))){for(t.flags|=128,tu(a,!1),e=l.updateQueue,t.updateQueue=e,eu(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)jr(n,e),n=n.sibling;return U(ci,1&ci.current|2),t.child}e=e.sibling}null!==a.tail&&te()>Ss&&(t.flags|=128,r=!0,tu(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=fi(l))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,eu(t,e),tu(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!la)return nu(t),null}else 2*te()-a.renderingStartTime>Ss&&536870912!==n&&(t.flags|=128,r=!0,tu(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(e=a.last)?e.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=te(),t.sibling=null,e=ci.current,U(ci,r?1&e|2:1&e),t):(nu(t),null);case 22:case 23:return si(t),vl(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(nu(t),6&t.subtreeFlags&&(t.flags|=8192)):nu(t),null!==(n=t.updateQueue)&&eu(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&H(Ua),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),ka(za),nu(t),null;case 25:case 30:return null}throw Error(o(156,t.tag))}function au(e,t){switch(na(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ka(za),Q(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return K(t),null;case 13:if(si(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));pa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return H(ci),null;case 4:return Q(),null;case 10:return ka(t.type),null;case 22:case 23:return si(t),vl(),null!==e&&H(Ua),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return ka(za),null;default:return null}}function lu(e,t){switch(na(t),t.tag){case 3:ka(za),Q();break;case 26:case 27:case 5:K(t);break;case 4:Q();break;case 13:si(t);break;case 19:H(ci);break;case 10:ka(t.type);break;case 22:case 23:si(t),vl(),null!==e&&H(Ua);break;case 24:ka(za)}}function ou(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var l=n.create,o=n.inst;r=l(),o.destroy=r}n=n.next}while(n!==a)}}catch(e){cc(t,t.return,e)}}function iu(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var l=a.next;r=l;do{if((r.tag&e)===e){var o=r.inst,i=o.destroy;if(void 0!==i){o.destroy=void 0,a=t;var u=n,s=i;try{s()}catch(e){cc(a,u,e)}}}r=r.next}while(r!==l)}}catch(e){cc(t,t.return,e)}}function uu(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{dl(t,n)}catch(t){cc(e,e.return,t)}}}function su(e,t,n){n.props=gi(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){cc(e,t,n)}}function cu(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){cc(e,t,n)}}function fu(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){cc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){cc(e,t,n)}else n.current=null}function du(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){cc(e,e.return,t)}}function pu(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,l=null,i=null,u=null,s=null,c=null,f=null;for(m in n){var d=n[m];if(n.hasOwnProperty(m)&&null!=d)switch(m){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(m)||Zc(e,t,m,null,r,d)}}for(var p in r){var m=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case"type":l=m;break;case"name":a=m;break;case"checked":c=m;break;case"defaultChecked":f=m;break;case"value":i=m;break;case"defaultValue":u=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(o(137,t));break;default:m!==d&&Zc(e,t,p,m,r,d)}}return void gt(e,i,u,s,c,f,l,a);case"select":for(l in m=i=u=p=null,n)if(s=n[l],n.hasOwnProperty(l)&&null!=s)switch(l){case"value":break;case"multiple":m=s;default:r.hasOwnProperty(l)||Zc(e,t,l,null,r,s)}for(a in r)if(l=r[a],s=n[a],r.hasOwnProperty(a)&&(null!=l||null!=s))switch(a){case"value":p=l;break;case"defaultValue":u=l;break;case"multiple":i=l;default:l!==s&&Zc(e,t,a,l,r,s)}return t=u,n=i,r=m,void(null!=p?bt(e,!!n,p,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(u in m=p=null,n)if(a=n[u],n.hasOwnProperty(u)&&null!=a&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:Zc(e,t,u,null,r,a)}for(i in r)if(a=r[i],l=n[i],r.hasOwnProperty(i)&&(null!=a||null!=l))switch(i){case"value":p=a;break;case"defaultValue":m=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(o(91));break;default:a!==l&&Zc(e,t,i,a,r,l)}return void kt(e,p,m);case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Zc(e,t,h,null,r,p));for(s in r)p=r[s],m=n[s],!r.hasOwnProperty(s)||p===m||null==p&&null==m||("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Zc(e,t,s,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Zc(e,t,g,null,r,p);for(c in r)if(p=r[c],m=n[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(o(137,t));break;default:Zc(e,t,c,p,r,m)}return;default:if(Pt(t)){for(var v in n)p=n[v],n.hasOwnProperty(v)&&void 0!==p&&!r.hasOwnProperty(v)&&Jc(e,t,v,void 0,r,p);for(f in r)p=r[f],m=n[f],!r.hasOwnProperty(f)||p===m||void 0===p&&void 0===m||Jc(e,t,f,p,r,m);return}}for(var y in n)p=n[y],n.hasOwnProperty(y)&&null!=p&&!r.hasOwnProperty(y)&&Zc(e,t,y,null,r,p);for(d in r)p=r[d],m=n[d],!r.hasOwnProperty(d)||p===m||null==p&&null==m||Zc(e,t,d,p,r,m)}(r,e.type,n,t),r[Me]=t}catch(t){cc(e,e.return,t)}}function mu(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&mf(e.type)||4===e.tag}function hu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||mu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&mf(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function gu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xc));else if(4!==r&&(27===r&&mf(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(gu(e,t,n),e=e.sibling;null!==e;)gu(e,t,n),e=e.sibling}function vu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&mf(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(vu(e,t,n),e=e.sibling;null!==e;)vu(e,t,n),e=e.sibling}function yu(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,a=t.attributes;a.length;)t.removeAttributeNode(a[0]);ef(t,r,n),t[ze]=e,t[Me]=n}catch(t){cc(e,e.return,t)}}var bu=!1,ku=!1,wu=!1,Su="function"==typeof WeakSet?WeakSet:Set,Eu=null;function Cu(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Du(e,n),4&r&&ou(5,n);break;case 1:if(Du(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){cc(n,n.return,e)}else{var a=gi(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){cc(n,n.return,e)}}64&r&&uu(n),512&r&&cu(n,n.return);break;case 3:if(Du(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{dl(e,t)}catch(e){cc(n,n.return,e)}}break;case 27:null===t&&4&r&&yu(n);case 26:case 5:Du(e,n),null===t&&4&r&&du(n),512&r&&cu(n,n.return);break;case 12:Du(e,n);break;case 13:Du(e,n),4&r&&Nu(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=mc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||bu)){t=null!==t&&null!==t.memoizedState||ku,a=bu;var l=ku;bu=r,(ku=t)&&!l?ju(e,n,!!(8772&n.subtreeFlags)):Du(e,n),bu=a,ku=l}break;case 30:break;default:Du(e,n)}}function _u(e){var t=e.alternate;null!==t&&(e.alternate=null,_u(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&He(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var Pu=null,Tu=!1;function xu(e,t,n){for(n=n.child;null!==n;)Ou(e,t,n),n=n.sibling}function Ou(e,t,n){if(fe&&"function"==typeof fe.onCommitFiberUnmount)try{fe.onCommitFiberUnmount(ce,n)}catch(e){}switch(n.tag){case 26:ku||fu(n,t),xu(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:ku||fu(n,t);var r=Pu,a=Tu;mf(n.type)&&(Pu=n.stateNode,Tu=!1),xu(e,t,n),Sf(n.stateNode),Pu=r,Tu=a;break;case 5:ku||fu(n,t);case 6:if(r=Pu,a=Tu,Pu=null,xu(e,t,n),Tu=a,null!==(Pu=r))if(Tu)try{(9===Pu.nodeType?Pu.body:"HTML"===Pu.nodeName?Pu.ownerDocument.body:Pu).removeChild(n.stateNode)}catch(e){cc(n,t,e)}else try{Pu.removeChild(n.stateNode)}catch(e){cc(n,t,e)}break;case 18:null!==Pu&&(Tu?(hf(9===(e=Pu).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),xd(e)):hf(Pu,n.stateNode));break;case 4:r=Pu,a=Tu,Pu=n.stateNode.containerInfo,Tu=!0,xu(e,t,n),Pu=r,Tu=a;break;case 0:case 11:case 14:case 15:ku||iu(2,n,t),ku||iu(4,n,t),xu(e,t,n);break;case 1:ku||(fu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&su(n,t,r)),xu(e,t,n);break;case 21:xu(e,t,n);break;case 22:ku=(r=ku)||null!==n.memoizedState,xu(e,t,n),ku=r;break;default:xu(e,t,n)}}function Nu(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{xd(e)}catch(e){cc(t,t.return,e)}}function Lu(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new Su),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new Su),t;default:throw Error(o(435,e.tag))}}(e);t.forEach((function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function zu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],l=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:if(mf(u.type)){Pu=u.stateNode,Tu=!1;break e}break;case 5:Pu=u.stateNode,Tu=!1;break e;case 3:case 4:Pu=u.stateNode.containerInfo,Tu=!0;break e}u=u.return}if(null===Pu)throw Error(o(160));Ou(l,i,a),Pu=null,Tu=!1,null!==(l=a.alternate)&&(l.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Ru(t,e),t=t.sibling}var Mu=null;function Ru(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:zu(t,e),Iu(e),4&r&&(iu(3,e,e.return),ou(3,e),iu(5,e,e.return));break;case 1:zu(t,e),Iu(e),512&r&&(ku||null===n||fu(n,n.return)),64&r&&bu&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=Mu;if(zu(t,e),Iu(e),512&r&&(ku||null===n||fu(n,n.return)),4&r){var l=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(l=a.getElementsByTagName("title")[0])||l[je]||l[ze]||"http://www.w3.org/2000/svg"===l.namespaceURI||l.hasAttribute("itemprop"))&&(l=a.createElement(r),a.head.insertBefore(l,a.querySelector("head > title"))),ef(l,r,n),l[ze]=e,We(l),r=l;break e;case"link":var i=Hf("link","href",a).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((l=i[u]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&l.getAttribute("rel")===(null==n.rel?null:n.rel)&&l.getAttribute("title")===(null==n.title?null:n.title)&&l.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}ef(l=a.createElement(r),r,n),a.head.appendChild(l);break;case"meta":if(i=Hf("meta","content",a).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((l=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&l.getAttribute("name")===(null==n.name?null:n.name)&&l.getAttribute("property")===(null==n.property?null:n.property)&&l.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&l.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}ef(l=a.createElement(r),r,n),a.head.appendChild(l);break;default:throw Error(o(468,r))}l[ze]=e,We(l),r=l}e.stateNode=r}else Uf(a,e.type,e.stateNode);else e.stateNode=If(a,r,e.memoizedProps);else l!==r?(null===l?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):l.count--,null===r?Uf(a,e.type,e.stateNode):If(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&pu(e,e.memoizedProps,n.memoizedProps)}break;case 27:zu(t,e),Iu(e),512&r&&(ku||null===n||fu(n,n.return)),null!==n&&4&r&&pu(e,e.memoizedProps,n.memoizedProps);break;case 5:if(zu(t,e),Iu(e),512&r&&(ku||null===n||fu(n,n.return)),32&e.flags){a=e.stateNode;try{St(a,"")}catch(t){cc(e,e.return,t)}}4&r&&null!=e.stateNode&&pu(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(wu=!0);break;case 6:if(zu(t,e),Iu(e),4&r){if(null===e.stateNode)throw Error(o(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){cc(e,e.return,t)}}break;case 3:if(jf=null,a=Mu,Mu=_f(t.containerInfo),zu(t,e),Mu=a,Iu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{xd(t.containerInfo)}catch(t){cc(e,e.return,t)}wu&&(wu=!1,Au(e));break;case 4:r=Mu,Mu=_f(e.stateNode.containerInfo),zu(t,e),Iu(e),Mu=r;break;case 12:default:zu(t,e),Iu(e);break;case 13:zu(t,e),Iu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(ws=te()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Lu(e,r));break;case 22:a=null!==e.memoizedState;var s=null!==n&&null!==n.memoizedState,c=bu,f=ku;if(bu=c||a,ku=f||s,zu(t,e),ku=f,bu=c,Iu(e),8192&r)e:for(t=e.stateNode,t._visibility=a?-2&t._visibility:1|t._visibility,a&&(null===n||s||bu||ku||Fu(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){s=n=t;try{if(l=s.stateNode,a)"function"==typeof(i=l.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{u=s.stateNode;var d=s.memoizedProps.style,p=null!=d&&d.hasOwnProperty("display")?d.display:null;u.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){cc(s,s.return,e)}}}else if(6===t.tag){if(null===n){s=t;try{s.stateNode.nodeValue=a?"":s.memoizedProps}catch(e){cc(s,s.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Lu(e,n));break;case 19:zu(t,e),Iu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Lu(e,r));case 30:case 21:}}function Iu(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(mu(r)){n=r;break}r=r.return}if(null==n)throw Error(o(160));switch(n.tag){case 27:var a=n.stateNode;vu(e,hu(e),a);break;case 5:var l=n.stateNode;32&n.flags&&(St(l,""),n.flags&=-33),vu(e,hu(e),l);break;case 3:case 4:var i=n.stateNode.containerInfo;gu(e,hu(e),i);break;default:throw Error(o(161))}}catch(t){cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Au(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Au(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Du(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)Cu(e,t.alternate,t),t=t.sibling}function Fu(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:iu(4,t,t.return),Fu(t);break;case 1:fu(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&su(t,t.return,n),Fu(t);break;case 27:Sf(t.stateNode);case 26:case 5:fu(t,t.return),Fu(t);break;case 22:null===t.memoizedState&&Fu(t);break;default:Fu(t)}e=e.sibling}}function ju(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,l=t,o=l.flags;switch(l.tag){case 0:case 11:case 15:ju(a,l,n),ou(4,l);break;case 1:if(ju(a,l,n),"function"==typeof(a=(r=l).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){cc(r,r.return,e)}if(null!==(a=(r=l).updateQueue)){var i=r.stateNode;try{var u=a.shared.hiddenCallbacks;if(null!==u)for(a.shared.hiddenCallbacks=null,a=0;a<u.length;a++)fl(u[a],i)}catch(e){cc(r,r.return,e)}}n&&64&o&&uu(l),cu(l,l.return);break;case 27:yu(l);case 26:case 5:ju(a,l,n),n&&null===r&&4&o&&du(l),cu(l,l.return);break;case 12:ju(a,l,n);break;case 13:ju(a,l,n),n&&4&o&&Nu(a,l);break;case 22:null===l.memoizedState&&ju(a,l,n),cu(l,l.return);break;case 30:break;default:ju(a,l,n)}t=t.sibling}}function Hu(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Ra(n))}function Uu(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ra(e))}function Bu(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)$u(e,t,n,r),t=t.sibling}function $u(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:Bu(e,t,n,r),2048&a&&ou(9,t);break;case 1:case 13:default:Bu(e,t,n,r);break;case 3:Bu(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ra(e)));break;case 12:if(2048&a){Bu(e,t,n,r),e=t.stateNode;try{var l=t.memoizedProps,o=l.id,i=l.onPostCommit;"function"==typeof i&&i(o,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){cc(t,t.return,e)}}else Bu(e,t,n,r);break;case 23:break;case 22:l=t.stateNode,o=t.alternate,null!==t.memoizedState?2&l._visibility?Bu(e,t,n,r):Wu(e,t):2&l._visibility?Bu(e,t,n,r):(l._visibility|=2,Vu(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&Hu(o,t);break;case 24:Bu(e,t,n,r),2048&a&&Uu(t.alternate,t)}}function Vu(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var l=e,o=t,i=n,u=r,s=o.flags;switch(o.tag){case 0:case 11:case 15:Vu(l,o,i,u,a),ou(8,o);break;case 23:break;case 22:var c=o.stateNode;null!==o.memoizedState?2&c._visibility?Vu(l,o,i,u,a):Wu(l,o):(c._visibility|=2,Vu(l,o,i,u,a)),a&&2048&s&&Hu(o.alternate,o);break;case 24:Vu(l,o,i,u,a),a&&2048&s&&Uu(o.alternate,o);break;default:Vu(l,o,i,u,a)}t=t.sibling}}function Wu(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:Wu(n,r),2048&a&&Hu(r.alternate,r);break;case 24:Wu(n,r),2048&a&&Uu(r.alternate,r);break;default:Wu(n,r)}t=t.sibling}}var qu=8192;function Qu(e){if(e.subtreeFlags&qu)for(e=e.child;null!==e;)Gu(e),e=e.sibling}function Gu(e){switch(e.tag){case 26:Qu(e),e.flags&qu&&null!==e.memoizedState&&function(e,t,n){if(null===$f)throw Error(o(475));var r=$f;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=Nf(n.href),l=e.querySelector(Lf(a));if(l)return null!==(e=l._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Wf.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=l,void We(l);l=e.ownerDocument||e,n=zf(n),(a=Ef.get(a))&&Df(n,a),We(l=l.createElement("link"));var i=l;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),ef(l,"link",n),t.instance=l}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Wf.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Mu,e.memoizedState,e.memoizedProps);break;case 5:default:Qu(e);break;case 3:case 4:var t=Mu;Mu=_f(e.stateNode.containerInfo),Qu(e),Mu=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=qu,qu=16777216,Qu(e),qu=t):Qu(e))}}function Ku(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Yu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];Eu=r,Ju(r,e)}Ku(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Xu(e),e=e.sibling}function Xu(e){switch(e.tag){case 0:case 11:case 15:Yu(e),2048&e.flags&&iu(9,e,e.return);break;case 3:case 12:default:Yu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Zu(e)):Yu(e)}}function Zu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];Eu=r,Ju(r,e)}Ku(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:iu(8,t,t.return),Zu(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Zu(t));break;default:Zu(t)}e=e.sibling}}function Ju(e,t){for(;null!==Eu;){var n=Eu;switch(n.tag){case 0:case 11:case 15:iu(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Ra(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,Eu=r;else e:for(n=e;null!==Eu;){var a=(r=Eu).sibling,l=r.return;if(_u(r),r===n){Eu=null;break e}if(null!==a){a.return=l,Eu=a;break e}Eu=l}}}var es={getCacheForType:function(e){var t=Pa(za),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},ts="function"==typeof WeakMap?WeakMap:Map,ns=0,rs=null,as=null,ls=0,os=0,is=null,us=!1,ss=!1,cs=!1,fs=0,ds=0,ps=0,ms=0,hs=0,gs=0,vs=0,ys=null,bs=null,ks=!1,ws=0,Ss=1/0,Es=null,Cs=null,_s=0,Ps=null,Ts=null,xs=0,Os=0,Ns=null,Ls=null,zs=0,Ms=null;function Rs(){return 2&ns&&0!==ls?ls&-ls:null!==R.T?0!==Da?Da:Oc():Ne()}function Is(){0===gs&&(gs=536870912&ls&&!la?536870912:Se());var e=ai.current;return null!==e&&(e.flags|=32),gs}function As(e,t,n){(e!==rs||2!==os&&9!==os)&&null===e.cancelPendingCommit||($s(e,0),Hs(e,ls,gs,!1)),_e(e,n),2&ns&&e===rs||(e===rs&&(!(2&ns)&&(ms|=n),4===ds&&Hs(e,ls,gs,!1)),Sc(e))}function Ds(e,t,n){if(6&ns)throw Error(o(327));for(var r=!n&&!(124&t)&&!(t&e.expiredLanes)||ke(e,t),a=r?function(e,t){var n=ns;ns|=2;var r=Ws(),a=qs();rs!==e||ls!==t?(Es=null,Ss=te()+500,$s(e,t)):ss=ke(e,t);e:for(;;)try{if(0!==os&&null!==as){t=as;var l=is;t:switch(os){case 1:os=0,is=null,Js(e,t,l,1);break;case 2:case 9:if(Ka(l)){os=0,is=null,Zs(t);break}t=function(){2!==os&&9!==os||rs!==e||(os=7),Sc(e)},l.then(t,t);break e;case 3:os=7;break e;case 4:os=5;break e;case 7:Ka(l)?(os=0,is=null,Zs(t)):(os=0,is=null,Js(e,t,l,7));break;case 5:var i=null;switch(as.tag){case 26:i=as.memoizedState;case 5:case 27:var u=as;if(!i||Bf(i)){os=0,is=null;var s=u.sibling;if(null!==s)as=s;else{var c=u.return;null!==c?(as=c,ec(c)):as=null}break t}}os=0,is=null,Js(e,t,l,5);break;case 6:os=0,is=null,Js(e,t,l,6);break;case 8:Bs(),ds=6;break e;default:throw Error(o(462))}}Ys();break}catch(t){Vs(e,t)}return ya=va=null,R.H=r,R.A=a,ns=n,null!==as?0:(rs=null,ls=0,xr(),ds)}(e,t):Gs(e,t,!0),l=r;;){if(0===a){ss&&!r&&Hs(e,t,0,!1);break}if(n=e.current.alternate,!l||js(n)){if(2===a){if(l=t,e.errorRecoveryDisabledLanes&l)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;a=ys;var s=u.current.memoizedState.isDehydrated;if(s&&($s(u,i).flags|=256),2!==(i=Gs(u,i,!1))){if(cs&&!s){u.errorRecoveryDisabledLanes|=l,ms|=l,a=4;break e}l=bs,bs=a,null!==l&&(null===bs?bs=l:bs.push.apply(bs,l))}a=i}if(l=!1,2!==a)continue}}if(1===a){$s(e,0),Hs(e,t,0,!0);break}e:{switch(r=e,l=a){case 0:case 1:throw Error(o(345));case 4:if((4194048&t)!==t)break;case 6:Hs(r,t,gs,!us);break e;case 2:bs=null;break;case 3:case 5:break;default:throw Error(o(329))}if((62914560&t)===t&&10<(a=ws+300-te())){if(Hs(r,t,gs,!us),0!==be(r,0,!0))break e;r.timeoutHandle=sf(Fs.bind(null,r,n,bs,Es,ks,t,gs,ms,vs,us,l,2,-0,0),a)}else Fs(r,n,bs,Es,ks,t,gs,ms,vs,us,l,0,-0,0)}break}a=Gs(e,t,!1),l=!1}Sc(e)}function Fs(e,t,n,r,a,l,i,u,s,c,f,d,p,m){if(e.timeoutHandle=-1,(8192&(d=t.subtreeFlags)||!(16785408&~d))&&($f={stylesheets:null,count:0,unsuspend:Vf},Gu(t),null!==(d=function(){if(null===$f)throw Error(o(475));var e=$f;return e.stylesheets&&0===e.count&&Qf(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Qf(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=d(nc.bind(null,e,t,l,n,r,a,i,u,s,f,1,p,m)),void Hs(e,l,i,!c);nc(e,t,l,n,r,a,i,u,s)}function js(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],l=a.getSnapshot;a=a.value;try{if(!Kn(l(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Hs(e,t,n,r){t&=~hs,t&=~ms,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var l=31-pe(a),o=1<<l;r[l]=-1,a&=~o}0!==n&&Pe(e,n,t)}function Us(){return!!(6&ns)||(Ec(0,!1),!1)}function Bs(){if(null!==as){if(0===os)var e=as.return;else ya=va=null,Dl(e=as),Ko=null,Yo=0,e=as;for(;null!==e;)lu(e.alternate,e),e=e.return;as=null}}function $s(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,cf(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Bs(),rs=e,as=n=Fr(e.current,null),ls=t,os=0,is=null,us=!1,ss=ke(e,t),cs=!1,vs=gs=hs=ms=ps=ds=0,bs=ys=null,ks=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-pe(r),l=1<<a;t|=e[a],r&=~l}return fs=t,xr(),n}function Vs(e,t){bl=null,R.H=Wo,t===Wa||t===Qa?(t=Ja(),os=3):t===qa?(t=Ja(),os=4):os=t===Pi?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,is=t,null===as&&(ds=1,wi(e,Cr(t,e.current)))}function Ws(){var e=R.H;return R.H=Wo,null===e?Wo:e}function qs(){var e=R.A;return R.A=es,e}function Qs(){ds=4,us||(4194048&ls)!==ls&&null!==ai.current||(ss=!0),!(134217727&ps)&&!(134217727&ms)||null===rs||Hs(rs,ls,gs,!1)}function Gs(e,t,n){var r=ns;ns|=2;var a=Ws(),l=qs();rs===e&&ls===t||(Es=null,$s(e,t)),t=!1;var o=ds;e:for(;;)try{if(0!==os&&null!==as){var i=as,u=is;switch(os){case 8:Bs(),o=6;break e;case 3:case 2:case 9:case 6:null===ai.current&&(t=!0);var s=os;if(os=0,is=null,Js(e,i,u,s),n&&ss){o=0;break e}break;default:s=os,os=0,is=null,Js(e,i,u,s)}}Ks(),o=ds;break}catch(t){Vs(e,t)}return t&&e.shellSuspendCounter++,ya=va=null,ns=r,R.H=a,R.A=l,null===as&&(rs=null,ls=0,xr()),o}function Ks(){for(;null!==as;)Xs(as)}function Ys(){for(;null!==as&&!J();)Xs(as)}function Xs(e){var t=Xi(e.alternate,e,fs);e.memoizedProps=e.pendingProps,null===t?ec(e):as=t}function Zs(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Ai(n,t,t.pendingProps,t.type,void 0,ls);break;case 11:t=Ai(n,t,t.pendingProps,t.type.render,t.ref,ls);break;case 5:Dl(t);default:lu(n,t),t=Xi(n,t=as=jr(t,fs),fs)}e.memoizedProps=e.pendingProps,null===t?ec(e):as=t}function Js(e,t,n,r){ya=va=null,Dl(t),Ko=null,Yo=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Ea(t,n,a,!0),null!==(n=ai.current)){switch(n.tag){case 13:return null===li?Qs():null===n.alternate&&0===ds&&(ds=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===Ga?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),fc(e,r,a)),!1;case 22:return n.flags|=65536,r===Ga?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),fc(e,r,a)),!1}throw Error(o(435,n.tag))}return fc(e,r,a),Qs(),!1}if(la)return null!==(t=ai.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==ua&&ha(Cr(e=Error(o(422),{cause:r}),n))):(r!==ua&&ha(Cr(t=Error(o(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=Cr(r,n),il(e,a=Ei(e.stateNode,r,a)),4!==ds&&(ds=2)),!1;var l=Error(o(520),{cause:r});if(l=Cr(l,n),null===ys?ys=[l]:ys.push(l),4!==ds&&(ds=2),null===t)return!0;r=Cr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,il(n,e=Ei(n.stateNode,r,e)),!1;case 1:if(t=n.type,l=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===l||"function"!=typeof l.componentDidCatch||null!==Cs&&Cs.has(l))))return n.flags|=65536,a&=-a,n.lanes|=a,_i(a=Ci(a),e,n,r),il(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,ls))return ds=1,wi(e,Cr(n,e.current)),void(as=null)}catch(t){if(null!==a)throw as=a,t;return ds=1,wi(e,Cr(n,e.current)),void(as=null)}32768&t.flags?(la||1===r?e=!0:ss||536870912&ls?e=!1:(us=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=ai.current)&&13===r.tag&&(r.flags|=16384)),tc(t,e)):ec(t)}function ec(e){var t=e;do{if(32768&t.flags)return void tc(t,us);e=t.return;var n=ru(t.alternate,t,fs);if(null!==n)return void(as=n);if(null!==(t=t.sibling))return void(as=t);as=t=e}while(null!==t);0===ds&&(ds=5)}function tc(e,t){do{var n=au(e.alternate,e);if(null!==n)return n.flags&=32767,void(as=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(as=e);as=e=n}while(null!==e);ds=6,as=null}function nc(e,t,n,r,a,l,i,u,s){e.cancelPendingCommit=null;do{ic()}while(0!==_s);if(6&ns)throw Error(o(327));if(null!==t){if(t===e.current)throw Error(o(177));if(l=t.lanes|t.childLanes,function(e,t,n,r,a,l){var o=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(n=o&~n;0<n;){var c=31-pe(n),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&Pe(e,r,0),0!==l&&0===a&&0!==e.tag&&(e.suspendedLanes|=l&~(o&~t))}(e,n,l|=Tr,i,u,s),e===rs&&(as=rs=null,ls=0),Ts=t,Ps=e,xs=n,Os=l,Ns=a,Ls=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,X(le,(function(){return uc(),null}))):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=R.T,R.T=null,a=I.p,I.p=2,i=ns,ns|=4;try{!function(e,t){if(e=e.containerInfo,tf=rd,tr(e=er(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==a&&3!==d.nodeType||(u=i+a),d!==l||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=i),p===l&&++f===r&&(s=i),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(nf={focusedElem:e,selectionRange:n},rd=!1,Eu=t;null!==Eu;)if(e=(t=Eu).child,1024&t.subtreeFlags&&null!==e)e.return=t,Eu=e;else for(;null!==Eu;){switch(l=(t=Eu).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==l){e=void 0,n=t,a=l.memoizedProps,l=l.memoizedState,r=n.stateNode;try{var h=gi(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,l),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){cc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))gf(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":gf(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(o(163))}if(null!==(e=t.sibling)){e.return=t.return,Eu=e;break}Eu=t.return}}(e,t)}finally{ns=i,I.p=a,R.T=r}}_s=1,rc(),ac(),lc()}}function rc(){if(1===_s){_s=0;var e=Ps,t=Ts,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=R.T,R.T=null;var r=I.p;I.p=2;var a=ns;ns|=4;try{Ru(t,e);var l=nf,o=er(e.containerInfo),i=l.focusedElem,u=l.selectionRange;if(o!==i&&i&&i.ownerDocument&&Jn(i.ownerDocument.documentElement,i)){if(null!==u&&tr(i)){var s=u.start,c=u.end;if(void 0===c&&(c=s),"selectionStart"in i)i.selectionStart=s,i.selectionEnd=Math.min(c,i.value.length);else{var f=i.ownerDocument||document,d=f&&f.defaultView||window;if(d.getSelection){var p=d.getSelection(),m=i.textContent.length,h=Math.min(u.start,m),g=void 0===u.end?h:Math.min(u.end,m);!p.extend&&h>g&&(o=g,g=h,h=o);var v=Zn(i,h),y=Zn(i,g);if(v&&y&&(1!==p.rangeCount||p.anchorNode!==v.node||p.anchorOffset!==v.offset||p.focusNode!==y.node||p.focusOffset!==y.offset)){var b=f.createRange();b.setStart(v.node,v.offset),p.removeAllRanges(),h>g?(p.addRange(b),p.extend(y.node,y.offset)):(b.setEnd(y.node,y.offset),p.addRange(b))}}}}for(f=[],p=i;p=p.parentNode;)1===p.nodeType&&f.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<f.length;i++){var k=f[i];k.element.scrollLeft=k.left,k.element.scrollTop=k.top}}rd=!!tf,nf=tf=null}finally{ns=a,I.p=r,R.T=n}}e.current=t,_s=2}}function ac(){if(2===_s){_s=0;var e=Ps,t=Ts,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=R.T,R.T=null;var r=I.p;I.p=2;var a=ns;ns|=4;try{Cu(e,t.alternate,t)}finally{ns=a,I.p=r,R.T=n}}_s=3}}function lc(){if(4===_s||3===_s){_s=0,ee();var e=Ps,t=Ts,n=xs,r=Ls;10256&t.subtreeFlags||10256&t.flags?_s=5:(_s=0,Ts=Ps=null,oc(e,e.pendingLanes));var a=e.pendingLanes;if(0===a&&(Cs=null),Oe(n),t=t.stateNode,fe&&"function"==typeof fe.onCommitFiberRoot)try{fe.onCommitFiberRoot(ce,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=R.T,a=I.p,I.p=2,R.T=null;try{for(var l=e.onRecoverableError,o=0;o<r.length;o++){var i=r[o];l(i.value,{componentStack:i.stack})}}finally{R.T=t,I.p=a}}3&xs&&ic(),Sc(e),a=e.pendingLanes,4194090&n&&42&a?e===Ms?zs++:(zs=0,Ms=e):zs=0,Ec(0,!1)}}function oc(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Ra(t))}function ic(e){return rc(),ac(),lc(),uc()}function uc(){if(5!==_s)return!1;var e=Ps,t=Os;Os=0;var n=Oe(xs),r=R.T,a=I.p;try{I.p=32>n?32:n,R.T=null,n=Ns,Ns=null;var l=Ps,i=xs;if(_s=0,Ts=Ps=null,xs=0,6&ns)throw Error(o(331));var u=ns;if(ns|=4,Xu(l.current),$u(l,l.current,i,n),ns=u,Ec(0,!1),fe&&"function"==typeof fe.onPostCommitFiberRoot)try{fe.onPostCommitFiberRoot(ce,l)}catch(e){}return!0}finally{I.p=a,R.T=r,oc(e,t)}}function sc(e,t,n){t=Cr(n,t),null!==(e=ll(e,t=Ei(e.stateNode,t,2),2))&&(_e(e,2),Sc(e))}function cc(e,t,n){if(3===e.tag)sc(e,e,n);else for(;null!==t;){if(3===t.tag){sc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Cs||!Cs.has(r))){e=Cr(n,e),null!==(r=ll(t,n=Ci(2),2))&&(_i(n,r,t,e),_e(r,2),Sc(r));break}}t=t.return}}function fc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ts;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(cs=!0,a.add(n),e=dc.bind(null,e,t,n),t.then(e,e))}function dc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,rs===e&&(ls&n)===n&&(4===ds||3===ds&&(62914560&ls)===ls&&300>te()-ws?!(2&ns)&&$s(e,0):hs|=n,vs===ls&&(vs=0)),Sc(e)}function pc(e,t){0===t&&(t=Ee()),null!==(e=Lr(e,t))&&(_e(e,t),Sc(e))}function mc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),pc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(o(314))}null!==r&&r.delete(t),pc(e,n)}var gc=null,vc=null,yc=!1,bc=!1,kc=!1,wc=0;function Sc(e){e!==vc&&null===e.next&&(null===vc?gc=vc=e:vc=vc.next=e),bc=!0,yc||(yc=!0,df((function(){6&ns?X(re,Cc):_c()})))}function Ec(e,t){if(!kc&&bc){kc=!0;do{for(var n=!1,r=gc;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var l=0;else{var o=r.suspendedLanes,i=r.pingedLanes;l=(1<<31-pe(42|e)+1)-1,l=201326741&(l&=a&~(o&~i))?201326741&l|1:l?2|l:0}0!==l&&(n=!0,xc(r,l))}else l=ls,!(3&(l=be(r,r===rs?l:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||ke(r,l)||(n=!0,xc(r,l));r=r.next}}while(n);kc=!1}}function Cc(){_c()}function _c(){bc=yc=!1;var e,t=0;0!==wc&&(((e=window.event)&&"popstate"===e.type?e!==uf&&(uf=e,!0):(uf=null,!1))&&(t=wc),wc=0);for(var n=te(),r=null,a=gc;null!==a;){var l=a.next,o=Pc(a,n);0===o?(a.next=null,null===r?gc=l:r.next=l,null===l&&(vc=r)):(r=a,(0!==t||3&o)&&(bc=!0)),a=l}Ec(t,!1)}function Pc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,l=-62914561&e.pendingLanes;0<l;){var o=31-pe(l),i=1<<o,u=a[o];-1===u?i&n&&!(i&r)||(a[o]=we(i,t)):u<=t&&(e.expiredLanes|=i),l&=~i}if(n=ls,n=be(e,e===(t=rs)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===os||9===os)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&Z(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||ke(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&Z(r),Oe(n)){case 2:case 8:n=ae;break;case 32:default:n=le;break;case 268435456:n=ie}return r=Tc.bind(null,e),n=X(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&Z(r),e.callbackPriority=2,e.callbackNode=null,2}function Tc(e,t){if(0!==_s&&5!==_s)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(ic()&&e.callbackNode!==n)return null;var r=ls;return 0===(r=be(e,e===rs?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Ds(e,r,t),Pc(e,te()),null!=e.callbackNode&&e.callbackNode===n?Tc.bind(null,e):null)}function xc(e,t){if(ic())return null;Ds(e,t,!0)}function Oc(){return 0===wc&&(wc=Se()),wc}function Nc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Ot(""+e)}function Lc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var zc=0;zc<wr.length;zc++){var Mc=wr[zc];Sr(Mc.toLowerCase(),"on"+(Mc[0].toUpperCase()+Mc.slice(1)))}Sr(pr,"onAnimationEnd"),Sr(mr,"onAnimationIteration"),Sr(hr,"onAnimationStart"),Sr("dblclick","onDoubleClick"),Sr("focusin","onFocus"),Sr("focusout","onBlur"),Sr(gr,"onTransitionRun"),Sr(vr,"onTransitionStart"),Sr(yr,"onTransitionCancel"),Sr(br,"onTransitionEnd"),Ke("onMouseEnter",["mouseout","mouseover"]),Ke("onMouseLeave",["mouseout","mouseover"]),Ke("onPointerEnter",["pointerout","pointerover"]),Ke("onPointerLeave",["pointerout","pointerover"]),Ge("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ge("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ge("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ge("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ge("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ge("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ic=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Rc));function Ac(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==l&&a.isPropagationStopped())break e;l=i,a.currentTarget=s;try{l(a)}catch(e){vi(e)}a.currentTarget=null,l=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,s=i.currentTarget,i=i.listener,u!==l&&a.isPropagationStopped())break e;l=i,a.currentTarget=s;try{l(a)}catch(e){vi(e)}a.currentTarget=null,l=u}}}}function Dc(e,t){var n=t[Ie];void 0===n&&(n=t[Ie]=new Set);var r=e+"__bubble";n.has(r)||(Uc(t,e,2,!1),n.add(r))}function Fc(e,t,n){var r=0;t&&(r|=4),Uc(n,e,r,t)}var jc="_reactListening"+Math.random().toString(36).slice(2);function Hc(e){if(!e[jc]){e[jc]=!0,qe.forEach((function(t){"selectionchange"!==t&&(Ic.has(t)||Fc(t,!1,e),Fc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[jc]||(t[jc]=!0,Fc("selectionchange",!1,t))}}function Uc(e,t,n,r){switch(cd(t)){case 2:var a=ad;break;case 8:a=ld;break;default:a=od}n=a.bind(null,t,n,e),a=void 0,!jt||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Bc(e,t,n,r,a){var l=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===a)break;if(4===o)for(o=r.return;null!==o;){var s=o.tag;if((3===s||4===s)&&o.stateNode.containerInfo===a)return;o=o.return}for(;null!==i;){if(null===(o=Ue(i)))return;if(5===(s=o.tag)||6===s||26===s||27===s){r=l=o;continue e}i=i.parentNode}}r=r.return}At((function(){var r=l,a=Lt(n),o=[];e:{var i=kr.get(e);if(void 0!==i){var s=Jt,c=e;switch(e){case"keypress":if(0===Wt(n))break e;case"keydown":case"keyup":s=hn;break;case"focusin":c="focus",s=ln;break;case"focusout":c="blur",s=ln;break;case"beforeblur":case"afterblur":s=ln;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=rn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=an;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=vn;break;case pr:case mr:case hr:s=on;break;case br:s=yn;break;case"scroll":case"scrollend":s=tn;break;case"wheel":s=bn;break;case"copy":case"cut":case"paste":s=un;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=gn;break;case"toggle":case"beforetoggle":s=kn}var f=!!(4&t),d=!f&&("scroll"===e||"scrollend"===e),p=f?null!==i?i+"Capture":null:i;f=[];for(var m,h=r;null!==h;){var g=h;if(m=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===m||null===p||null!=(g=Dt(h,p))&&f.push($c(h,g,m)),d)break;h=h.return}0<f.length&&(i=new s(i,c,null,n,a),o.push({event:i,listeners:f}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Nt||!(c=n.relatedTarget||n.fromElement)||!Ue(c)&&!c[Re])&&(s||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?Ue(c):null)&&(d=u(c),f=c.tag,c!==d||5!==f&&27!==f&&6!==f)&&(c=null)):(s=null,c=r),s!==c)){if(f=rn,g="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(f=gn,g="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==s?i:$e(s),m=null==c?i:$e(c),(i=new f(g,h+"leave",s,n,a)).target=d,i.relatedTarget=m,g=null,Ue(a)===r&&((f=new f(p,h+"enter",c,n,a)).target=m,f.relatedTarget=d,g=f),d=g,s&&c)e:{for(p=c,h=0,m=f=s;m;m=Wc(m))h++;for(m=0,g=p;g;g=Wc(g))m++;for(;0<h-m;)f=Wc(f),h--;for(;0<m-h;)p=Wc(p),m--;for(;h--;){if(f===p||null!==p&&f===p.alternate)break e;f=Wc(f),p=Wc(p)}f=null}else f=null;null!==s&&qc(o,i,s,f,!1),null!==c&&null!==d&&qc(o,d,c,f,!0)}if("select"===(s=(i=r?$e(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===s&&"file"===i.type)var v=Fn;else if(zn(i))if(jn)v=Gn;else{v=qn;var y=Wn}else!(s=i.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&Pt(r.elementType)&&(v=Fn):v=Qn;switch(v&&(v=v(e,r))?Mn(o,v,n,a):(y&&y(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&yt(i,"number",i.value)),y=r?$e(r):window,e){case"focusin":(zn(y)||"true"===y.contentEditable)&&(rr=y,ar=r,lr=null);break;case"focusout":lr=ar=rr=null;break;case"mousedown":or=!0;break;case"contextmenu":case"mouseup":case"dragend":or=!1,ir(o,n,a);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":ir(o,n,a)}var b;if(Sn)e:{switch(e){case"compositionstart":var k="onCompositionStart";break e;case"compositionend":k="onCompositionEnd";break e;case"compositionupdate":k="onCompositionUpdate";break e}k=void 0}else Nn?xn(e,n)&&(k="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(k="onCompositionStart");k&&(_n&&"ko"!==n.locale&&(Nn||"onCompositionStart"!==k?"onCompositionEnd"===k&&Nn&&(b=Vt()):(Bt="value"in(Ut=a)?Ut.value:Ut.textContent,Nn=!0)),0<(y=Vc(r,k)).length&&(k=new sn(k,e,null,n,a),o.push({event:k,listeners:y}),(b||null!==(b=On(n)))&&(k.data=b))),(b=Cn?function(e,t){switch(e){case"compositionend":return On(t);case"keypress":return 32!==t.which?null:(Tn=!0,Pn);case"textInput":return(e=t.data)===Pn&&Tn?null:e;default:return null}}(e,n):function(e,t){if(Nn)return"compositionend"===e||!Sn&&xn(e,t)?(e=Vt(),$t=Bt=Ut=null,Nn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return _n&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(k=Vc(r,"onBeforeInput")).length&&(y=new sn("onBeforeInput","beforeinput",null,n,a),o.push({event:y,listeners:k}),y.data=b),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var l=Nc((a[Me]||null).action),o=r.submitter;o&&null!==(t=(t=o[Me]||null)?Nc(t.formAction):o.getAttribute("formAction"))&&(l=t,o=null);var i=new Jt("action","action",null,r,a);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==wc){var e=o?Lc(a,o):new FormData(a);Lo(n,{pending:!0,data:e,method:a.method,action:l},null,e)}}else"function"==typeof l&&(i.preventDefault(),e=o?Lc(a,o):new FormData(a),Lo(n,{pending:!0,data:e,method:a.method,action:l},l,e))},currentTarget:a}]})}}(o,e,r,n,a)}Ac(o,t)}))}function $c(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Vc(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;if(5!==(a=a.tag)&&26!==a&&27!==a||null===l||(null!=(a=Dt(e,n))&&r.unshift($c(e,a,l)),null!=(a=Dt(e,t))&&r.push($c(e,a,l))),3===e.tag)return r;e=e.return}return[]}function Wc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function qc(e,t,n,r,a){for(var l=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,a?null!=(s=Dt(n,l))&&o.unshift($c(n,s,u)):a||null!=(s=Dt(n,l))&&o.push($c(n,s,u))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Qc=/\r\n?/g,Gc=/\u0000|\uFFFD/g;function Kc(e){return("string"==typeof e?e:""+e).replace(Qc,"\n").replace(Gc,"")}function Yc(e,t){return t=Kc(t),Kc(e)===t}function Xc(){}function Zc(e,t,n,r,a,l){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||St(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&St(e,""+r);break;case"className":nt(e,"class",r);break;case"tabIndex":nt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":nt(e,n,r);break;case"style":_t(e,r,l);break;case"data":if("object"!==t){nt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Ot(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof l&&("formAction"===n?("input"!==t&&Zc(e,t,"name",a.name,a,null),Zc(e,t,"formEncType",a.formEncType,a,null),Zc(e,t,"formMethod",a.formMethod,a,null),Zc(e,t,"formTarget",a.formTarget,a,null)):(Zc(e,t,"encType",a.encType,a,null),Zc(e,t,"method",a.method,a,null),Zc(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Ot(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"onScroll":null!=r&&Dc("scroll",e);break;case"onScrollEnd":null!=r&&Dc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(o(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Ot(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Dc("beforetoggle",e),Dc("toggle",e),tt(e,"popover",r);break;case"xlinkActuate":rt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":rt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":rt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":rt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":rt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":rt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":rt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":rt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":rt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":tt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&tt(e,n=Tt.get(n)||n,r)}}function Jc(e,t,n,r,a,l){switch(n){case"style":_t(e,r,l);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(o(60));e.innerHTML=n}}break;case"children":"string"==typeof r?St(e,r):("number"==typeof r||"bigint"==typeof r)&&St(e,""+r);break;case"onScroll":null!=r&&Dc("scroll",e);break;case"onScrollEnd":null!=r&&Dc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Qe.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(l=null!=(l=e[Me]||null)?l[n]:null)&&e.removeEventListener(t,l,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):tt(e,n,r):("function"!=typeof l&&null!==l&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function ef(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Dc("error",e),Dc("load",e);var r,a=!1,l=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":a=!0;break;case"srcSet":l=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Zc(e,t,r,i,n,null)}}return l&&Zc(e,t,"srcSet",n.srcSet,n,null),void(a&&Zc(e,t,"src",n.src,n,null));case"input":Dc("invalid",e);var u=r=i=l=null,s=null,c=null;for(a in n)if(n.hasOwnProperty(a)){var f=n[a];if(null!=f)switch(a){case"name":l=f;break;case"type":i=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(o(137,t));break;default:Zc(e,t,a,f,n,null)}}return vt(e,r,u,s,c,i,l,!1),void ft(e);case"select":for(l in Dc("invalid",e),a=i=r=null,n)if(n.hasOwnProperty(l)&&null!=(u=n[l]))switch(l){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":a=u;default:Zc(e,t,l,u,n,null)}return t=r,n=i,e.multiple=!!a,void(null!=t?bt(e,!!a,t,!1):null!=n&&bt(e,!!a,n,!0));case"textarea":for(i in Dc("invalid",e),r=l=a=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":a=u;break;case"defaultValue":l=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(o(91));break;default:Zc(e,t,i,u,n,null)}return wt(e,a,l,r),void ft(e);case"option":for(s in n)n.hasOwnProperty(s)&&null!=(a=n[s])&&("selected"===s?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:Zc(e,t,s,a,n,null));return;case"dialog":Dc("beforetoggle",e),Dc("toggle",e),Dc("cancel",e),Dc("close",e);break;case"iframe":case"object":Dc("load",e);break;case"video":case"audio":for(a=0;a<Rc.length;a++)Dc(Rc[a],e);break;case"image":Dc("error",e),Dc("load",e);break;case"details":Dc("toggle",e);break;case"embed":case"source":case"link":Dc("error",e),Dc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(a=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Zc(e,t,c,a,n,null)}return;default:if(Pt(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(a=n[f])&&Jc(e,t,f,a,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(a=n[u])&&Zc(e,t,u,a,n,null)}var tf=null,nf=null;function rf(e){return 9===e.nodeType?e:e.ownerDocument}function af(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function lf(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function of(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var uf=null,sf="function"==typeof setTimeout?setTimeout:void 0,cf="function"==typeof clearTimeout?clearTimeout:void 0,ff="function"==typeof Promise?Promise:void 0,df="function"==typeof queueMicrotask?queueMicrotask:void 0!==ff?function(e){return ff.resolve(null).then(e).catch(pf)}:sf;function pf(e){setTimeout((function(){throw e}))}function mf(e){return"head"===e}function hf(e,t){var n=t,r=0,a=0;do{var l=n.nextSibling;if(e.removeChild(n),l&&8===l.nodeType)if("/$"===(n=l.data)){if(0<r&&8>r){n=r;var o=e.ownerDocument;if(1&n&&Sf(o.documentElement),2&n&&Sf(o.body),4&n)for(Sf(n=o.head),o=n.firstChild;o;){var i=o.nextSibling,u=o.nodeName;o[je]||"SCRIPT"===u||"STYLE"===u||"LINK"===u&&"stylesheet"===o.rel.toLowerCase()||n.removeChild(o),o=i}}if(0===a)return e.removeChild(l),void xd(t);a--}else"$"===n||"$?"===n||"$!"===n?a++:r=n.charCodeAt(0)-48;else r=0;n=l}while(n);xd(t)}function gf(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":gf(n),He(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function vf(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function yf(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var bf=null;function kf(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function wf(e,t,n){switch(t=rf(n),e){case"html":if(!(e=t.documentElement))throw Error(o(452));return e;case"head":if(!(e=t.head))throw Error(o(453));return e;case"body":if(!(e=t.body))throw Error(o(454));return e;default:throw Error(o(451))}}function Sf(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);He(e)}var Ef=new Map,Cf=new Set;function _f(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var Pf=I.d;I.d={f:function(){var e=Pf.f(),t=Us();return e||t},r:function(e){var t=Be(e);null!==t&&5===t.tag&&"form"===t.type?Mo(t):Pf.r(e)},D:function(e){Pf.D(e),xf("dns-prefetch",e,null)},C:function(e,t){Pf.C(e,t),xf("preconnect",e,t)},L:function(e,t,n){Pf.L(e,t,n);var r=Tf;if(r&&e&&t){var a='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+ht(n.imageSizes)+'"]')):a+='[href="'+ht(e)+'"]';var l=a;switch(t){case"style":l=Nf(e);break;case"script":l=Mf(e)}Ef.has(l)||(e=d({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),Ef.set(l,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(Lf(l))||"script"===t&&r.querySelector(Rf(l))||(ef(t=r.createElement("link"),"link",e),We(t),r.head.appendChild(t)))}},m:function(e,t){Pf.m(e,t);var n=Tf;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',l=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":l=Mf(e)}if(!Ef.has(l)&&(e=d({rel:"modulepreload",href:e},t),Ef.set(l,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Rf(l)))return}ef(r=n.createElement("link"),"link",e),We(r),n.head.appendChild(r)}}},X:function(e,t){Pf.X(e,t);var n=Tf;if(n&&e){var r=Ve(n).hoistableScripts,a=Mf(e),l=r.get(a);l||((l=n.querySelector(Rf(a)))||(e=d({src:e,async:!0},t),(t=Ef.get(a))&&Ff(e,t),We(l=n.createElement("script")),ef(l,"link",e),n.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(a,l))}},S:function(e,t,n){Pf.S(e,t,n);var r=Tf;if(r&&e){var a=Ve(r).hoistableStyles,l=Nf(e);t=t||"default";var o=a.get(l);if(!o){var i={loading:0,preload:null};if(o=r.querySelector(Lf(l)))i.loading=5;else{e=d({rel:"stylesheet",href:e,"data-precedence":t},n),(n=Ef.get(l))&&Df(e,n);var u=o=r.createElement("link");We(u),ef(u,"link",e),u._p=new Promise((function(e,t){u.onload=e,u.onerror=t})),u.addEventListener("load",(function(){i.loading|=1})),u.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Af(o,t,r)}o={type:"stylesheet",instance:o,count:1,state:i},a.set(l,o)}}},M:function(e,t){Pf.M(e,t);var n=Tf;if(n&&e){var r=Ve(n).hoistableScripts,a=Mf(e),l=r.get(a);l||((l=n.querySelector(Rf(a)))||(e=d({src:e,async:!0,type:"module"},t),(t=Ef.get(a))&&Ff(e,t),We(l=n.createElement("script")),ef(l,"link",e),n.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(a,l))}}};var Tf="undefined"==typeof document?null:document;function xf(e,t,n){var r=Tf;if(r&&"string"==typeof t&&t){var a=ht(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),Cf.has(a)||(Cf.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(ef(t=r.createElement("link"),"link",e),We(t),r.head.appendChild(t)))}}function Of(e,t,n,r){var a,l,i,u,s=(s=V.current)?_f(s):null;if(!s)throw Error(o(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=Nf(n.href),(r=(n=Ve(s).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Nf(n.href);var c=Ve(s).hoistableStyles,f=c.get(e);if(f||(s=s.ownerDocument||s,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=s.querySelector(Lf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),Ef.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},Ef.set(e,n),c||(a=s,l=e,i=n,u=f.state,a.querySelector('link[rel="preload"][as="style"]['+l+"]")?u.loading=1:(l=a.createElement("link"),u.preload=l,l.addEventListener("load",(function(){return u.loading|=1})),l.addEventListener("error",(function(){return u.loading|=2})),ef(l,"link",i),We(l),a.head.appendChild(l))))),t&&null===r)throw Error(o(528,""));return f}if(t&&null!==r)throw Error(o(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=Mf(n),(r=(n=Ve(s).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(o(444,e))}}function Nf(e){return'href="'+ht(e)+'"'}function Lf(e){return'link[rel="stylesheet"]['+e+"]"}function zf(e){return d({},e,{"data-precedence":e.precedence,precedence:null})}function Mf(e){return'[src="'+ht(e)+'"]'}function Rf(e){return"script[async]"+e}function If(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,We(r),r;var a=d({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return We(r=(e.ownerDocument||e).createElement("style")),ef(r,"style",a),Af(r,n.precedence,e),t.instance=r;case"stylesheet":a=Nf(n.href);var l=e.querySelector(Lf(a));if(l)return t.state.loading|=4,t.instance=l,We(l),l;r=zf(n),(a=Ef.get(a))&&Df(r,a),We(l=(e.ownerDocument||e).createElement("link"));var i=l;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),ef(l,"link",r),t.state.loading|=4,Af(l,n.precedence,e),t.instance=l;case"script":return l=Mf(n.src),(a=e.querySelector(Rf(l)))?(t.instance=a,We(a),a):(r=n,(a=Ef.get(l))&&Ff(r=d({},n),a),We(a=(e=e.ownerDocument||e).createElement("script")),ef(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(o(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Af(r,n.precedence,e));return t.instance}function Af(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,l=a,o=0;o<r.length;o++){var i=r[o];if(i.dataset.precedence===t)l=i;else if(l!==a)break}l?l.parentNode.insertBefore(e,l.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Df(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Ff(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var jf=null;function Hf(e,t,n){if(null===jf){var r=new Map,a=jf=new Map;a.set(n,r)}else(r=(a=jf).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var l=n[a];if(!(l[je]||l[ze]||"link"===e&&"stylesheet"===l.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==l.namespaceURI){var o=l.getAttribute(t)||"";o=e+o;var i=r.get(o);i?i.push(l):r.set(o,[l])}}return r}function Uf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Bf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var $f=null;function Vf(){}function Wf(){if(this.count--,0===this.count)if(this.stylesheets)Qf(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var qf=null;function Qf(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,qf=new Map,t.forEach(Gf,e),qf=null,Wf.call(e))}function Gf(e,t){if(!(4&t.state.loading)){var n=qf.get(e);if(n)var r=n.get(null);else{n=new Map,qf.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),l=0;l<a.length;l++){var o=a[l];"LINK"!==o.nodeName&&"not all"===o.getAttribute("media")||(n.set(o.dataset.precedence,o),r=o)}r&&n.set(null,r)}o=(a=t.instance).getAttribute("data-precedence"),(l=n.get(o)||r)===r&&n.set(null,a),n.set(o,a),this.count++,r=Wf.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),l?l.parentNode.insertBefore(a,l.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var Kf={$$typeof:w,Provider:null,Consumer:null,_currentValue:A,_currentValue2:A,_threadCount:0};function Yf(e,t,n,r,a,l,o,i){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ce(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ce(0),this.hiddenUpdates=Ce(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=l,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Xf(e,t,n,r,a,l,o,i,u,s,c,f){return e=new Yf(e,t,n,o,i,u,s,f),t=1,!0===l&&(t|=24),l=Ar(3,null,null,t),e.current=l,l.stateNode=e,(t=Ma()).refCount++,e.pooledCache=t,t.refCount++,l.memoizedState={element:r,isDehydrated:n,cache:t},nl(l),e}function Zf(e){return e?e=Rr:Rr}function Jf(e,t,n,r,a,l){a=Zf(a),null===r.context?r.context=a:r.pendingContext=a,(r=al(t)).payload={element:n},null!==(l=void 0===l?null:l)&&(r.callback=l),null!==(n=ll(e,r,t))&&(As(n,0,t),ol(n,e,t))}function ed(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function td(e,t){ed(e,t),(e=e.alternate)&&ed(e,t)}function nd(e){if(13===e.tag){var t=Lr(e,67108864);null!==t&&As(t,0,67108864),td(e,67108864)}}var rd=!0;function ad(e,t,n,r){var a=R.T;R.T=null;var l=I.p;try{I.p=2,od(e,t,n,r)}finally{I.p=l,R.T=a}}function ld(e,t,n,r){var a=R.T;R.T=null;var l=I.p;try{I.p=8,od(e,t,n,r)}finally{I.p=l,R.T=a}}function od(e,t,n,r){if(rd){var a=id(r);if(null===a)Bc(e,t,r,ud,n),bd(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return dd=kd(dd,e,t,n,r,a),!0;case"dragenter":return pd=kd(pd,e,t,n,r,a),!0;case"mouseover":return md=kd(md,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return hd.set(l,kd(hd.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,gd.set(l,kd(gd.get(l)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(bd(e,r),4&t&&-1<yd.indexOf(e)){for(;null!==a;){var l=Be(a);if(null!==l)switch(l.tag){case 3:if((l=l.stateNode).current.memoizedState.isDehydrated){var o=ye(l.pendingLanes);if(0!==o){var i=l;for(i.pendingLanes|=2,i.entangledLanes|=2;o;){var u=1<<31-pe(o);i.entanglements[1]|=u,o&=~u}Sc(l),!(6&ns)&&(Ss=te()+500,Ec(0,!1))}}break;case 13:null!==(i=Lr(l,2))&&As(i,0,2),Us(),td(l,2)}if(null===(l=id(r))&&Bc(e,t,r,ud,n),l===a)break;a=l}null!==a&&r.stopPropagation()}else Bc(e,t,r,null,n)}}function id(e){return sd(e=Lt(e))}var ud=null;function sd(e){if(ud=null,null!==(e=Ue(e))){var t=u(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=s(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return ud=e,null}function cd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ne()){case re:return 2;case ae:return 8;case le:case oe:return 32;case ie:return 268435456;default:return 32}default:return 32}}var fd=!1,dd=null,pd=null,md=null,hd=new Map,gd=new Map,vd=[],yd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function bd(e,t){switch(e){case"focusin":case"focusout":dd=null;break;case"dragenter":case"dragleave":pd=null;break;case"mouseover":case"mouseout":md=null;break;case"pointerover":case"pointerout":hd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":gd.delete(t.pointerId)}}function kd(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[a]},null!==t&&null!==(t=Be(t))&&nd(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function wd(e){var t=Ue(e.target);if(null!==t){var n=u(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=s(n)))return e.blockedOn=t,void function(e){var t=I.p;try{return I.p=e,function(){if(13===n.tag){var e=Rs();e=xe(e);var t=Lr(n,e);null!==t&&As(t,0,e),td(n,e)}}()}finally{I.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Sd(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=id(e.nativeEvent);if(null!==n)return null!==(t=Be(n))&&nd(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Nt=r,n.target.dispatchEvent(r),Nt=null,t.shift()}return!0}function Ed(e,t,n){Sd(e)&&n.delete(t)}function Cd(){fd=!1,null!==dd&&Sd(dd)&&(dd=null),null!==pd&&Sd(pd)&&(pd=null),null!==md&&Sd(md)&&(md=null),hd.forEach(Ed),gd.forEach(Ed)}function _d(e,t){e.blockedOn===t&&(e.blockedOn=null,fd||(fd=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Cd)))}var Pd=null;function Td(e){Pd!==e&&(Pd=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){Pd===e&&(Pd=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===sd(r||n))continue;break}var l=Be(n);null!==l&&(e.splice(t,3),t-=3,Lo(l,{pending:!0,data:a,method:n.method,action:r},r,a))}})))}function xd(e){function t(t){return _d(t,e)}null!==dd&&_d(dd,e),null!==pd&&_d(pd,e),null!==md&&_d(md,e),hd.forEach(t),gd.forEach(t);for(var n=0;n<vd.length;n++){var r=vd[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<vd.length&&null===(n=vd[0]).blockedOn;)wd(n),null===n.blockedOn&&vd.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],l=n[r+1],o=a[Me]||null;if("function"==typeof l)o||Td(n);else if(o){var i=null;if(l&&l.hasAttribute("formAction")){if(a=l,o=l[Me]||null)i=o.formAction;else if(null!==sd(a))continue}else i=o.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),Td(n)}}}function Od(e){this._internalRoot=e}function Nd(e){this._internalRoot=e}Nd.prototype.render=Od.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Jf(t.current,Rs(),e,t,null,null)},Nd.prototype.unmount=Od.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Jf(e.current,2,null,e,null,null),Us(),t[Re]=null}},Nd.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ne();e={blockedOn:null,target:e,priority:t};for(var n=0;n<vd.length&&0!==t&&t<vd[n].priority;n++);vd.splice(n,0,e),0===n&&wd(e)}};var Ld=a.version;if("19.1.0"!==Ld)throw Error(o(527,Ld,"19.1.0"));I.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=u(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return c(a),e;if(l===r)return c(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,s=a.child;s;){if(s===n){i=!0,n=a,r=l;break}if(s===r){i=!0,r=a,n=l;break}s=s.sibling}if(!i){for(s=l.child;s;){if(s===n){i=!0,n=l,r=a;break}if(s===r){i=!0,r=l,n=a;break}s=s.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?f(e):null)?null:e.stateNode};var zd={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:R,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Md=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Md.isDisabled&&Md.supportsFiber)try{ce=Md.inject(zd),fe=Md}catch(e){}}t.createRoot=function(e,t){if(!i(e))throw Error(o(299));var n=!1,r="",a=yi,l=bi,u=ki;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(l=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Xf(e,1,!1,null,0,n,r,a,l,u,0,null),e[Re]=t.current,Hc(e),new Od(t)},t.hydrateRoot=function(e,t,n){if(!i(e))throw Error(o(299));var r=!1,a="",l=yi,u=bi,s=ki,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onUncaughtError&&(l=n.onUncaughtError),void 0!==n.onCaughtError&&(u=n.onCaughtError),void 0!==n.onRecoverableError&&(s=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Xf(e,1,!0,t,0,r,a,l,u,s,0,c)).context=Zf(null),n=t.current,(a=al(r=xe(r=Rs()))).callback=null,ll(n,a,r),n=r,t.current.lanes=n,_e(t,n),Sc(t),e[Re]=t.current,Hc(e),new Nd(t)},t.version="19.1.0"},262:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Shape=void 0,t.default=function(e,t,n){var r=(0,a.useState)(null),l=r[0],o=r[1],i=(0,a.useRef)(null);if(t&&e||null===l||(i.current=null,o(null)),t&&e&&i.current!=t.id){i.current=t.id;try{gapi.client.sheets.spreadsheets.values.get({spreadsheetId:e.mapItemsSheet,range:"".concat(t.id,"!A1:K")}).then((function(e){if(i.current===t.id){for(var n=JSON.parse(e.body),r=[],a=1;a<n.values.length;a++){var l=n.values[a];r.push({id:Number(l[0]),lat:Number(l[1]),lng:Number(l[2]),rotation:Number(l[3]),label:l[4],shape:Number(l[5]),width:Number(l[6]),height:Number(l[7]),colorR:Number(l[8]),colorG:Number(l[9]),colorB:Number(l[10])})}o(r)}}))}catch(e){console.error(e),n()}}return[l]};var r,a=n(540);!function(e){e[e.Square=1]="Square",e[e.Circle=2]="Circle"}(r||(t.Shape=r={}))},270:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(540)),l=n(338),o=r(n(826));(0,l.createRoot)(document.querySelector("#app")).render(a.default.createElement(o.default,null))},338:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},477:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<l(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,o=a>>>1;r<o;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>l(u,n))s<a&&0>l(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<a&&0>l(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,k="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function S(e){if(g=!1,w(e),!h)if(null!==r(s))h=!0,C||(C=!0,E());else{var t=r(c);null!==t&&z(S,t.startTime-e)}}var E,C=!1,_=-1,P=5,T=-1;function x(){return!(!v&&t.unstable_now()-T<P)}function O(){if(v=!1,C){var e=t.unstable_now();T=e;var n=!0;try{e:{h=!1,g&&(g=!1,b(_),_=-1),m=!0;var l=p;try{t:{for(w(e),d=r(s);null!==d&&!(d.expirationTime>e&&x());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var i=o(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,w(e),n=!0;break t}d===r(s)&&a(s),w(e)}else a(s);d=r(s)}if(null!==d)n=!0;else{var u=r(c);null!==u&&z(S,u.startTime-e),n=!1}}break e}finally{d=null,p=l,m=!1}n=void 0}}finally{n?E():C=!1}}}if("function"==typeof k)E=function(){k(O)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,L=N.port2;N.port1.onmessage=O,E=function(){L.postMessage(null)}}else E=function(){y(O,0)};function z(e,n){_=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){v=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,l){var o=t.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?o+l:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>o?(e.sortIndex=l,n(c,e),null===r(s)&&e===r(c)&&(g?(b(_),_=-1):g=!0,z(S,l-o))):(e.sortIndex=i,n(s,e),h||m||(h=!0,C||(C=!0,E()))),e},t.unstable_shouldYield=x,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},523:function(e,t,n){"use strict";var r,a=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),o=0;o<n.length;o++)"default"!==n[o]&&a(t,e,n[o]);return l(t,e),t}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.trcEvent,n=e.locations,r=(0,u.useState)(t.zoom),a=r[0],l=r[1],o=(0,u.useState)([t.lat,t.lng]),i=o[0],d=o[1];return u.default.createElement("div",{style:{width:"100%",height:"100%",position:"relative",overflow:"hidden"}},u.default.createElement(c.APIProvider,{apiKey:s.GAPI_KEY},u.default.createElement(c.Map,{style:{width:"100%",height:"100%",position:"absolute"},defaultCenter:{lat:t.lat,lng:t.lng},defaultZoom:t.zoom,heading:t.heading,gestureHandling:"greedy",mapTypeId:"satellite",disableDefaultUI:!0,onZoomChanged:function(e){return l(e.map.getZoom())},onCenterChanged:function(e){return d([e.map.getCenter().lat(),e.map.getCenter().lng()])}})),n&&n.map((function(e){return u.default.createElement(f.default,{location:e,zoom:a,center:i})})))};var u=o(n(540)),s=n(920),c=n(673),f=i(n(871))},540:(e,t,n)=>{"use strict";e.exports=n(869)},610:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=(0,r.useState)(null),a=n[0],l=n[1],o=(0,r.useRef)(!1);if(e&&!o.current){o.current=!0;try{gapi.client.sheets.spreadsheets.values.get({spreadsheetId:"1gxvbmiHvucGcFV6cKdTS7AizvEIBZ1RbxLhEEf5_J8U",range:"Metadata!A1:B"}).then((function(e){for(var n={},r=0,a=JSON.parse(e.body).values;r<a.length;r++){var o=a[r],i=o[0],u=o[1];n[i]=u}n.MapItemsDatabase&&n.EventsDatabase?(console.log("set metadata"),l({mapItemsSheet:n.MapItemsDatabase,eventsSheet:n.EventsDatabase})):t()}))}catch(e){console.error(e),t()}}return[a]};var r=n(540)},673:function(e,t,n){!function(e,t,n,r){function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=a(t),o=a(r);function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function u(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return i(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(null,arguments)}function c(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}function f(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:t+""}var d={NOT_LOADED:"NOT_LOADED",LOADING:"LOADING",LOADED:"LOADED",FAILED:"FAILED",AUTH_FAILURE:"AUTH_FAILURE"},p=function(){function e(){}return e.load=function(e,t){try{var n,r=this,a=e.libraries?e.libraries.split(","):[],l=r.serializeParams(e);r.listeners.push(t),null!=(n=window.google)&&null!=(n=n.maps)&&n.importLibrary?(r.serializedApiParams||(r.loadingStatus=d.LOADED),r.notifyLoadingStatusListeners()):(r.serializedApiParams=l,r.initImportLibrary(e)),r.serializedApiParams&&r.serializedApiParams!==l&&console.warn("[google-maps-api-loader] The maps API has already been loaded with different parameters and will not be loaded again. Refresh the page for new values to have effect.");var o=["maps"].concat(a);return Promise.resolve(Promise.all(o.map((function(e){return google.maps.importLibrary(e)})))).then((function(){}))}catch(e){return Promise.reject(e)}},e.serializeParams=function(e){return[e.v,e.key,e.language,e.region,e.authReferrerPolicy,e.solutionChannel].join("/")},e.initImportLibrary=function(e){var t=this;if(window.google||(window.google={}),window.google.maps||(window.google.maps={}),window.google.maps.importLibrary)console.error("[google-maps-api-loader-internal]: initImportLibrary must only be called once");else{var n=null;google.maps.importLibrary=function(r){return(n||(n=new Promise((function(n,r){for(var a,l=document.createElement("script"),o=new URLSearchParams,i=0,u=Object.entries(e);i<u.length;i++){var s=u[i],c=s[0],f=s[1],p=c.replace(/[A-Z]/g,(function(e){return"_"+e[0].toLowerCase()}));o.set(p,String(f))}o.set("loading","async"),o.set("callback","__googleMapsCallback__"),l.async=!0,l.src="https://maps.googleapis.com/maps/api/js?"+o.toString(),l.nonce=(null==(a=document.querySelector("script[nonce]"))?void 0:a.nonce)||"",l.onerror=function(){t.loadingStatus=d.FAILED,t.notifyLoadingStatusListeners(),r(new Error("The Google Maps JavaScript API could not load."))},window.__googleMapsCallback__=function(){t.loadingStatus=d.LOADED,t.notifyLoadingStatusListeners(),n()},window.gm_authFailure=function(){t.loadingStatus=d.AUTH_FAILURE,t.notifyLoadingStatusListeners()},t.loadingStatus=d.LOADING,t.notifyLoadingStatusListeners(),document.head.append(l)})))).then((function(){return google.maps.importLibrary(r)}))}}},e.notifyLoadingStatusListeners=function(){for(var e,t=u(this.listeners);!(e=t()).done;)(0,e.value)(this.loadingStatus)},e}();p.loadingStatus=d.NOT_LOADED,p.serializedApiParams=void 0,p.listeners=[];var m="undefined"!=typeof Symbol?Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator")):"@@iterator";function h(e,t,n){if(!e.s){if(n instanceof g){if(!n.s)return void(n.o=h.bind(null,e,t));1&t&&(t=n.s),n=n.v}if(n&&n.then)return void n.then(h.bind(null,e,t),h.bind(null,e,2));e.s=t,e.v=n;var r=e.o;r&&r(e)}}var g=function(){function e(){}return e.prototype.then=function(t,n){var r=new e,a=this.s;if(a){var l=1&a?t:n;if(l){try{h(r,1,l(this.v))}catch(e){h(r,2,e)}return r}return this}return this.o=function(e){try{var a=e.v;1&e.s?h(r,1,t?t(a):a):n?h(r,1,n(a)):h(r,2,a)}catch(e){h(r,2,e)}},r},e}();function v(e){return e instanceof g&&1&e.s}var y=["onLoad","onError","apiKey","version","libraries"],b=["children"];function k(e,t,n){if("function"==typeof e[m]){var r,a,l,o=function(e){try{for(;!((r=i.next()).done||n&&n());)if((e=t(r.value))&&e.then){if(!v(e))return void e.then(o,l||(l=h.bind(null,a=new g,2)));e=e.v}a?h(a,1,e):a=e}catch(e){h(a||(a=new g),2,e)}},i=e[m]();if(o(),i.return){var u=function(e){try{r.done||i.return()}catch(e){}return e};if(a&&a.then)return a.then(u,(function(e){throw u(e)}));u()}return a}if(!("length"in e))throw new TypeError("Object is not iterable");for(var s=[],c=0;c<e.length;c++)s.push(e[c]);return function(e,t,n){var r,a,l=-1;return function o(i){try{for(;++l<e.length&&(!n||!n());)if((i=t(l))&&i.then){if(!v(i))return void i.then(o,a||(a=h.bind(null,r=new g,2)));i=i.v}r?h(r,1,i):r=i}catch(e){h(r||(r=new g),2,e)}}(),r}(s,(function(e){return t(s[e])}),n)}var w=l.default.createContext(null);function S(e,n){for(var r,a=function(){var a=r.value,l=n[a],o=E[a];t.useEffect((function(){if(e&&l){var t=google.maps.event.addListener(e,o,(function(t){l(function(e,t,n){var r={type:e,map:t,detail:{},stoppable:!1,stop:function(){}};if(C.includes(e)){var a=r,l=t.getCenter(),o=t.getZoom(),i=t.getHeading()||0,u=t.getTilt()||0,s=t.getBounds();return l&&s&&Number.isFinite(o)||console.warn("[createEvent] at least one of the values from the map returned undefined. This is not expected to happen. Please report an issue at https://github.com/visgl/react-google-maps/issues/new"),a.detail={center:(null==l?void 0:l.toJSON())||{lat:0,lng:0},zoom:o||0,heading:i,tilt:u,bounds:(null==s?void 0:s.toJSON())||{north:90,east:180,south:-90,west:-180}},a}if(_.includes(e)){var c;if(!n)throw new Error("[createEvent] mouse events must provide a srcEvent");var f=r;return f.domEvent=n.domEvent,f.stoppable=!0,f.stop=function(){return n.stop()},f.detail={latLng:(null==(c=n.latLng)?void 0:c.toJSON())||null,placeId:n.placeId},f}return r}(o,e,t))}));return function(){return t.remove()}}}),[e,o,l])},l=u(P);!(r=l()).done;)a()}var E={onBoundsChanged:"bounds_changed",onCenterChanged:"center_changed",onClick:"click",onContextmenu:"contextmenu",onDblclick:"dblclick",onDrag:"drag",onDragend:"dragend",onDragstart:"dragstart",onHeadingChanged:"heading_changed",onIdle:"idle",onIsFractionalZoomEnabledChanged:"isfractionalzoomenabled_changed",onMapCapabilitiesChanged:"mapcapabilities_changed",onMapTypeIdChanged:"maptypeid_changed",onMousemove:"mousemove",onMouseout:"mouseout",onMouseover:"mouseover",onProjectionChanged:"projection_changed",onRenderingTypeChanged:"renderingtype_changed",onTilesLoaded:"tilesloaded",onTiltChanged:"tilt_changed",onZoomChanged:"zoom_changed",onCameraChanged:"bounds_changed"},C=["bounds_changed","center_changed","heading_changed","tilt_changed","zoom_changed"],_=["click","contextmenu","dblclick","mousemove","mouseout","mouseover"],P=Object.keys(E);function T(e,n){var r=t.useRef(void 0);r.current&&o.default(n,r.current)||(r.current=n),t.useEffect(e,r.current)}var x=new Set(["backgroundColor","clickableIcons","controlSize","disableDefaultUI","disableDoubleClickZoom","draggable","draggableCursor","draggingCursor","fullscreenControl","fullscreenControlOptions","gestureHandling","headingInteractionEnabled","isFractionalZoomEnabled","keyboardShortcuts","mapTypeControl","mapTypeControlOptions","mapTypeId","maxZoom","minZoom","noClear","panControl","panControlOptions","restriction","rotateControl","rotateControlOptions","scaleControl","scaleControlOptions","scrollwheel","streetView","streetViewControl","streetViewControlOptions","styles","tiltInteractionEnabled","zoomControl","zoomControlOptions"]);function O(){var e;return(null==(e=t.useContext(w))?void 0:e.status)||d.NOT_LOADED}function N(e){return!(!e||"object"!=typeof e)&&"lat"in e&&"lng"in e&&Number.isFinite(e.lat)&&Number.isFinite(e.lng)}function L(e){return N(e)?e:e.toJSON()}var z=function(){return l.default.createElement("div",{style:{position:"absolute",top:0,left:0,bottom:0,right:0,zIndex:999,display:"flex",flexFlow:"column nowrap",textAlign:"center",justifyContent:"center",fontSize:".8rem",color:"rgba(0,0,0,0.6)",background:"#dddddd",padding:"1rem 1.5rem"}},l.default.createElement("h2",null,"Error: AuthFailure"),l.default.createElement("p",null,"A problem with your API key prevents the map from rendering correctly. Please make sure the value of the ",l.default.createElement("code",null,"APIProvider.apiKey")," prop is correct. Check the error-message in the console for further details."))};function M(){return O()===d.LOADED}function R(e){var n=t.useReducer((function(e){return e+1}),0)[1],r=t.useRef({center:{lat:0,lng:0},heading:0,tilt:0,zoom:0});return t.useEffect((function(){if(e){var t=google.maps.event.addListener(e,"bounds_changed",(function(){(function(e,t){var n=e.getCenter(),r=e.getZoom(),a=e.getHeading()||0,l=e.getTilt()||0,o=e.getBounds();n&&o&&Number.isFinite(r)||console.warn("[useTrackedCameraState] at least one of the values from the map returned undefined. This is not expected to happen. Please report an issue at https://github.com/visgl/react-google-maps/issues/new"),Object.assign(t.current,{center:(null==n?void 0:n.toJSON())||{lat:0,lng:0},zoom:r||0,heading:a,tilt:l})})(e,r),n()}));return function(){return t.remove()}}}),[e,n]),r}var I=["id","defaultBounds","defaultCenter","defaultZoom","defaultHeading","defaultTilt","reuseMaps","renderingType","colorScheme"],A=["padding"],D=function(){function e(){}return e.has=function(e){return this.entries[e]&&this.entries[e].length>0},e.pop=function(e){return this.entries[e]&&this.entries[e].pop()||null},e.push=function(e,t){this.entries[e]||(this.entries[e]=[]),this.entries[e].push(t)},e}();function F(e,n){var r=M(),a=t.useState(null),l=a[0],o=a[1],i=function(){var e=t.useState(null),n=e[0],r=e[1];return[n,t.useCallback((function(e){return r(e)}),[r])]}(),u=i[0],f=i[1],d=R(l),p=e.id,m=e.defaultBounds,h=e.defaultCenter,g=e.defaultZoom,v=e.defaultHeading,y=e.defaultTilt,b=e.reuseMaps,k=e.renderingType,w=e.colorScheme,S=c(e,I),E=void 0!==e.zoom||void 0!==e.defaultZoom,C=void 0!==e.center||void 0!==e.defaultCenter;m||E&&C||console.warn("<Map> component is missing configuration. You have to provide zoom and center (via the `zoom`/`defaultZoom` and `center`/`defaultCenter` props) or specify the region to show using `defaultBounds`. See https://visgl.github.io/react-google-maps/docs/api-reference/components/map#required"),!S.center&&h&&(S.center=h),!S.zoom&&Number.isFinite(g)&&(S.zoom=g),!S.heading&&Number.isFinite(v)&&(S.heading=v),!S.tilt&&Number.isFinite(y)&&(S.tilt=y);for(var _=0,P=Object.keys(S);_<P.length;_++){var T=P[_];void 0===S[T]&&delete S[T]}var x=t.useRef(void 0);return t.useEffect((function(){if(u&&r){var t,a,l=n.addMapInstance,i=n.removeMapInstance,f=e.mapId,h=(f||"default")+":"+(k||"default")+":"+(w||"LIGHT");if(b&&D.has(h)?(a=D.pop(h),t=a.getDiv(),u.appendChild(t),a.setOptions(S),setTimeout((function(){return a.setCenter(a.getCenter())}),0)):((t=document.createElement("div")).style.height="100%",u.appendChild(t),a=new google.maps.Map(t,s({},S,k?{renderingType:k}:{},w?{colorScheme:w}:{}))),o(a),l(a,p),m){var g=m.padding,v=c(m,A);a.fitBounds(v,g)}else E&&C||a.fitBounds({east:180,west:-180,south:-90,north:90});if(x.current){var y=x.current,_=y.mapId,P=y.cameraState;_!==f&&a.setOptions(P)}return function(){x.current={mapId:f,cameraState:d.current},t.remove(),b?D.push(h,a):google.maps.event.clearInstanceListeners(a),o(null),i(p)}}}),[u,r,p,e.mapId,e.renderingType,e.colorScheme]),[l,f,d]}D.entries={};var j=l.default.createContext(null),H=function(e){var n=e.children,r=e.id,a=e.className,o=e.style,i=t.useContext(w),u=O();if(!i)throw new Error("<Map> can only be used inside an <ApiProvider> component.");var c=F(e,i),f=c[0],p=c[1],m=c[2];(function(e,n,r){var a=r.center?L(r.center):null,l=null,o=null;a&&Number.isFinite(a.lat)&&Number.isFinite(a.lng)&&(l=a.lat,o=a.lng);var i=Number.isFinite(r.zoom)?r.zoom:null,u=Number.isFinite(r.heading)?r.heading:null,s=Number.isFinite(r.tilt)?r.tilt:null;t.useLayoutEffect((function(){if(e){var t={},r=!1;null===l||null===o||n.current.center.lat===l&&n.current.center.lng===o||(t.center={lat:l,lng:o},r=!0),null!==i&&n.current.zoom!==i&&(t.zoom=i,r=!0),null!==u&&n.current.heading!==u&&(t.heading=u,r=!0),null!==s&&n.current.tilt!==s&&(t.tilt=s,r=!0),r&&e.moveCamera(t)}}))})(f,m,e),S(f,e),function(e,t){for(var n={},r=0,a=Object.keys(t);r<a.length;r++){var l=a[r];x.has(l)&&(n[l]=t[l])}T((function(){e&&e.setOptions(n)}),[n])}(f,e);var h=function(e,n){var r=n.viewport,a=n.viewState,l=!!r;return t.useLayoutEffect((function(){if(e&&a){var t=a.latitude,n=a.longitude,r=a.bearing,l=a.pitch,o=a.zoom;e.moveCamera({center:{lat:t,lng:n},heading:r,tilt:l,zoom:o+1})}}),[e,a]),l}(f,e),g=!!e.controlled;t.useEffect((function(){if(f)return h&&f.setOptions({disableDefaultUI:!0}),(h||g)&&f.setOptions({gestureHandling:"none",keyboardShortcuts:!1}),function(){f.setOptions({gestureHandling:e.gestureHandling,keyboardShortcuts:e.keyboardShortcuts})}}),[f,h,g,e.gestureHandling,e.keyboardShortcuts]);var v=e.center?L(e.center):null,y=null,b=null;v&&Number.isFinite(v.lat)&&Number.isFinite(v.lng)&&(y=v.lat,b=v.lng);var k=t.useMemo((function(){var t,n,r,a,l;return{center:{lat:null!=(t=y)?t:0,lng:null!=(n=b)?n:0},zoom:null!=(r=e.zoom)?r:0,heading:null!=(a=e.heading)?a:0,tilt:null!=(l=e.tilt)?l:0}}),[y,b,e.zoom,e.heading,e.tilt]);t.useLayoutEffect((function(){if(f&&g){f.moveCamera(k);var e=f.addListener("bounds_changed",(function(){f.moveCamera(k)}));return function(){return e.remove()}}}),[f,g,k]);var E=t.useMemo((function(){return s({width:"100%",height:"100%",position:"relative",zIndex:h?-1:0},o)}),[o,h]),C=t.useMemo((function(){return{map:f}}),[f]);return u===d.AUTH_FAILURE?l.default.createElement("div",{style:s({position:"relative"},a?{}:E),className:a},l.default.createElement(z,null)):l.default.createElement("div",s({ref:p,"data-testid":"map",style:a?void 0:E,className:a},r?{id:r}:{}),f?l.default.createElement(j.Provider,{value:C},n):null)};H.deckGLViewProps=!0;var U=new Set;function B(){var e,t=[].slice.call(arguments),n=JSON.stringify(t);U.has(n)||(U.add(n),(e=console).error.apply(e,t))}var $=function(e){void 0===e&&(e=null);var n=t.useContext(w),r=(t.useContext(j)||{}).map;if(null===n)return B("useMap(): failed to retrieve APIProviderContext. Make sure that the <APIProvider> component exists and that the component you are calling `useMap()` from is a sibling of the <APIProvider>."),null;var a=n.mapInstances;return null!==e?a[e]||null:r||a.default||null};function V(e){var n=M(),r=t.useContext(w);return t.useEffect((function(){n&&r&&r.importLibrary(e)}),[n,r,e]),(null==r?void 0:r.loadedLibraries[e])||null}function W(e,n,r){t.useEffect((function(){if(e&&n&&r){var t=google.maps.event.addListener(e,n,r);return function(){return t.remove()}}}),[e,n,r])}function q(e,n,r){t.useEffect((function(){e&&(e[n]=r)}),[e,n,r])}function Q(e,n,r){t.useEffect((function(){if(e&&n&&r)return e.addEventListener(n,r),function(){return e.removeEventListener(n,r)}}),[e,n,r])}function G(e){return void 0!==e.content}var K=l.default.createContext(null),Y={TOP_LEFT:["0%","0%"],TOP_CENTER:["50%","0%"],TOP:["50%","0%"],TOP_RIGHT:["100%","0%"],LEFT_CENTER:["0%","50%"],LEFT_TOP:["0%","0%"],LEFT:["0%","50%"],LEFT_BOTTOM:["0%","100%"],RIGHT_TOP:["100%","0%"],RIGHT:["100%","50%"],RIGHT_CENTER:["100%","50%"],RIGHT_BOTTOM:["100%","100%"],BOTTOM_LEFT:["0%","100%"],BOTTOM_CENTER:["50%","100%"],BOTTOM:["50%","100%"],BOTTOM_RIGHT:["100%","100%"],CENTER:["50%","50%"]},X=function(e){var t=e.children,n=e.styles,r=e.className,a=e.anchorPoint,o=null!=a?a:Y.BOTTOM,i=o[0],u=o[1],s="-"+i,c="-"+u;i.trimStart().startsWith("-")&&(s=i.substring(1)),u.trimStart().startsWith("-")&&(c=u.substring(1));var f="translate(50%, 100%) translate("+s+", "+c+")";return l.default.createElement("div",{style:{transform:f}},l.default.createElement("div",{className:r,style:n},t))};function Z(e){var n=t.useState(null),r=n[0],a=n[1],l=t.useState(null),o=l[0],i=l[1],u=$(),s=V("marker"),c=e.children,f=e.onClick,d=e.className,p=e.onMouseEnter,m=e.onMouseLeave,h=e.onDrag,g=e.onDragStart,v=e.onDragEnd,y=e.collisionBehavior,b=e.clickable,k=e.draggable,w=e.position,S=e.title,E=e.zIndex,C=t.Children.count(c);return t.useEffect((function(){if(u&&s){var e=new s.AdvancedMarkerElement;e.map=u,a(e);var t=null;return C>0&&((t=document.createElement("div")).isCustomMarker=!0,e.content=t,i(t)),function(){var n;e.map=null,null==(n=t)||n.remove(),a(null),i(null)}}}),[u,s,C]),t.useEffect((function(){!r||!r.content||C>0||(r.content.className=d||"")}),[r,d,C]),q(r,"position",w),q(r,"title",null!=S?S:""),q(r,"zIndex",E),q(r,"collisionBehavior",y),t.useEffect((function(){r&&(r.gmpDraggable=void 0!==k?k:!!(h||g||v))}),[r,k,h,v,g]),t.useEffect((function(){if(r){var e=void 0!==b||Boolean(f)||Boolean(p)||Boolean(m);r.gmpClickable=e,e&&null!=r&&r.content&&r.content.nodeType===Node.ELEMENT_NODE&&(r.content.style.pointerEvents="none",r.content.firstElementChild&&(r.content.firstElementChild.style.pointerEvents="all"))}}),[r,b,f,p,m]),W(r,"click",f),W(r,"drag",h),W(r,"dragstart",g),W(r,"dragend",v),Q(null==r?void 0:r.element,"mouseenter",p),Q(null==r?void 0:r.element,"mouseleave",m),[r,o]}var J=t.forwardRef((function(e,r){var a=e.children,o=e.style,i=e.className,u=e.anchorPoint,s=Z(e),c=s[0],f=s[1],d=t.useMemo((function(){return c?{marker:c}:null}),[c]);return t.useImperativeHandle(r,(function(){return c}),[c]),f?l.default.createElement(K.Provider,{value:d},n.createPortal(l.default.createElement(X,{anchorPoint:u,styles:o,className:i},a),f)):null}));function ee(e,t,n){var r,a=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?a?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":a?e.setProperty(t,n):"number"!=typeof n||0===n||(r=t,te.has(r))?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}var te=new Set(["animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","scale","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth"]);var ne=["children","headerContent","style","className","pixelOffset","anchor","shouldFocus","onClose","onCloseClick"];function re(e){return"string"==typeof e?e:e.lat+","+e.lng}function ae(e){return e.slice(1)}var le=["onClick","onDrag","onDragStart","onDragEnd","onMouseOver","onMouseOut"];var oe=t.forwardRef((function(e,n){var r=function(e){var n=t.useState(null),r=n[0],a=n[1],l=$(),o=e.onClick,i=e.onDrag,u=e.onDragStart,s=e.onDragEnd,f=e.onMouseOver,d=e.onMouseOut,p=c(e,le),m=p.position,h=p.draggable;return t.useEffect((function(){if(l){var e=new google.maps.Marker(p);return e.setMap(l),a(e),function(){e.setMap(null),a(null)}}void 0===l&&console.error("<Marker> has to be inside a Map component.")}),[l]),t.useEffect((function(){if(r){var e=r,t=google.maps.event;return o&&t.addListener(e,"click",o),i&&t.addListener(e,"drag",i),u&&t.addListener(e,"dragstart",u),s&&t.addListener(e,"dragend",s),f&&t.addListener(e,"mouseover",f),d&&t.addListener(e,"mouseout",d),r.setDraggable(Boolean(h)),function(){t.clearInstanceListeners(e)}}}),[r,h,o,i,u,s,f,d]),t.useEffect((function(){r&&p&&r.setOptions(p)}),[r,p]),t.useEffect((function(){!h&&m&&r&&r.setPosition(m)}),[h,m,r]),r}(e);return t.useImperativeHandle(n,(function(){return r}),[r]),l.default.createElement(l.default.Fragment,null)}));var ie=function(e,t,n,r,a){return r+(e-t)*(a-r)/(n-t)};e.APILoadingStatus=d,e.APIProvider=function(e){var n=e.children,r=c(e,b),a=function(){var e=t.useState({}),n=e[0],r=e[1];return{mapInstances:n,addMapInstance:function(e,t){void 0===t&&(t="default"),r((function(n){var r;return s({},n,((r={})[t]=e,r))}))},removeMapInstance:function(e){void 0===e&&(e="default"),r((function(t){return c(t,[e].map(f))}))},clearMapInstances:function(){r({})}}}(),o=a.mapInstances,i=a.addMapInstance,u=a.removeMapInstance,d=a.clearMapInstances,m=function(e){var n=e.onLoad,r=e.onError,a=e.apiKey,l=e.version,o=e.libraries,i=void 0===o?[]:o,u=c(e,y),f=t.useState(p.loadingStatus),d=f[0],m=f[1],h=t.useReducer((function(e,t){var n;return e[t.name]?e:s({},e,((n={})[t.name]=t.value,n))}),{}),g=h[0],v=h[1],b=t.useMemo((function(){return null==i?void 0:i.join(",")}),[i]),w=t.useMemo((function(){return JSON.stringify(s({apiKey:a,version:l},u))}),[a,l,u]),S=t.useCallback((function(e){try{var t;if(g[e])return Promise.resolve(g[e]);if(null==(t=google)||null==(t=t.maps)||!t.importLibrary)throw new Error("[api-provider-internal] importLibrary was called before google.maps.importLibrary was defined.");return Promise.resolve(window.google.maps.importLibrary(e)).then((function(t){return v({name:e,value:t}),t}))}catch(e){return Promise.reject(e)}}),[g]);return t.useEffect((function(){!function(){try{var e=function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){var e=s({key:a},u);return l&&(e.v=l),(null==b?void 0:b.length)>0&&(e.libraries=b),(void 0===e.channel||e.channel<0||e.channel>999)&&delete e.channel,void 0===e.solutionChannel?e.solutionChannel="GMP_visgl_rgmlibrary_v1_default":""===e.solutionChannel&&delete e.solutionChannel,Promise.resolve(p.load(e,(function(e){return m(e)}))).then((function(){function e(){n&&n()}var t=k(["core","maps"].concat(i),(function(e){return Promise.resolve(S(e)).then((function(){}))}));return t&&t.then?t.then(e):e()}))}),(function(e){r?r(e):console.error("<ApiProvider> failed to load the Google Maps JavaScript API",e)}));return e&&e.then?e.then((function(){})):void 0}catch(e){Promise.reject(e)}}()}),[a,b,w]),{status:d,loadedLibraries:g,importLibrary:S}}(r),h=m.status,g=m.loadedLibraries,v=m.importLibrary,S=t.useMemo((function(){return{mapInstances:o,addMapInstance:i,removeMapInstance:u,clearMapInstances:d,status:h,loadedLibraries:g,importLibrary:v}}),[o,i,u,d,h,g,v]);return l.default.createElement(w.Provider,{value:S},n)},e.APIProviderContext=w,e.AdvancedMarker=J,e.AdvancedMarkerAnchorPoint=Y,e.AdvancedMarkerContext=K,e.CollisionBehavior={REQUIRED:"REQUIRED",REQUIRED_AND_HIDES_OPTIONAL:"REQUIRED_AND_HIDES_OPTIONAL",OPTIONAL_AND_HIDES_LOWER_PRIORITY:"OPTIONAL_AND_HIDES_LOWER_PRIORITY"},e.ColorScheme={DARK:"DARK",LIGHT:"LIGHT",FOLLOW_SYSTEM:"FOLLOW_SYSTEM"},e.ControlPosition={TOP_LEFT:1,TOP_CENTER:2,TOP:2,TOP_RIGHT:3,LEFT_CENTER:4,LEFT_TOP:5,LEFT:5,LEFT_BOTTOM:6,RIGHT_TOP:7,RIGHT:7,RIGHT_CENTER:8,RIGHT_BOTTOM:9,BOTTOM_LEFT:10,BOTTOM_CENTER:11,BOTTOM:11,BOTTOM_RIGHT:12,CENTER:13,BLOCK_START_INLINE_START:14,BLOCK_START_INLINE_CENTER:15,BLOCK_START_INLINE_END:16,INLINE_START_BLOCK_CENTER:17,INLINE_START_BLOCK_START:18,INLINE_START_BLOCK_END:19,INLINE_END_BLOCK_START:20,INLINE_END_BLOCK_CENTER:21,INLINE_END_BLOCK_END:22,BLOCK_END_INLINE_START:23,BLOCK_END_INLINE_CENTER:24,BLOCK_END_INLINE_END:25},e.GoogleMapsContext=j,e.InfoWindow=function(e){var r=e.children,a=e.headerContent,o=e.style,i=e.className,u=e.pixelOffset,s=e.anchor,f=e.shouldFocus,d=e.onClose,p=e.onCloseClick,m=c(e,ne),h=V("maps"),g=t.useState(null),v=g[0],y=g[1],b=t.useRef(null),k=t.useRef(null);t.useEffect((function(){if(h){b.current=document.createElement("div"),k.current=document.createElement("div");var e=m;u&&(e.pixelOffset=new google.maps.Size(u[0],u[1])),a&&(e.headerContent="string"==typeof a?a:k.current);var t=new google.maps.InfoWindow(m);return t.setContent(b.current),y(t),function(){var e,n;t.setContent(null),null==(e=b.current)||e.remove(),null==(n=k.current)||n.remove(),b.current=null,k.current=null,y(null)}}}),[h]);var w=t.useRef(null);t.useEffect((function(){v&&b.current&&(function(e,t,n){if(null!=t&&"object"!=typeof t)throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");var r=e.style;if(null!=n){for(var a in n)!n.hasOwnProperty(a)||null!=t&&t.hasOwnProperty(a)||(0===a.indexOf("--")?r.setProperty(a,""):"float"===a?r.cssFloat="":r[a]="");if(null!=t)for(var l in t){var o=t[l];t.hasOwnProperty(l)&&n[l]!==o&&ee(r,l,o)}}else{if(null==t)return;for(var i in t)t.hasOwnProperty(i)&&ee(r,i,t[i])}}(b.current,o||null,w.current),w.current=o||null,i!==b.current.className&&(b.current.className=i||""))}),[v,i,o]),T((function(){if(v){var e=m;e.pixelOffset=u?new google.maps.Size(u[0],u[1]):null,e.headerContent=a?"string"==typeof a?a:k.current:null,v.setOptions(m)}}),[m,u,a]),W(v,"close",d),W(v,"closeclick",p);var S=$();return T((function(){if(S&&v&&null!==s){var e=!!s,t={map:S};if(s&&(t.anchor=s,G(s)&&s.content instanceof Element)){var n=s.content,r=null==n?void 0:n.getBoundingClientRect();if(r&&null!=n&&n.isCustomMarker){var a,l=null==(a=s.content.firstElementChild)?void 0:a.firstElementChild,o=null==l?void 0:l.getBoundingClientRect(),i=o.x-r.x+(o.width-r.width)/2,c=o.y-r.y,d=m;d.pixelOffset=new google.maps.Size(u?u[0]+i:i,u?u[1]+c:c),v.setOptions(d)}}return void 0!==f&&(t.shouldFocus=f),v.open(t),function(){e&&v.set("anchor",null),v.close()}}}),[v,s,S,f,m,u]),l.default.createElement(l.default.Fragment,null,b.current&&n.createPortal(r,b.current),null!==k.current&&n.createPortal(a,k.current))},e.Map=H,e.MapControl=function(e){var r=e.children,a=e.position,l=t.useMemo((function(){return document.createElement("div")}),[]),o=$();return t.useEffect((function(){if(o){var e=o.controls[a];return e.push(l),function(){var t=e.getArray();if(t){var n=t.indexOf(l);e.removeAt(n)}}}}),[l,o,a]),n.createPortal(r,l)},e.Marker=oe,e.Pin=function(e){var r,a=null==(r=t.useContext(K))?void 0:r.marker,l=t.useMemo((function(){return document.createElement("div")}),[]);return t.useEffect((function(){var n;if(a){e.glyph&&e.children&&B("The <Pin> component only uses children to render the glyph if both the glyph property and children are present."),t.Children.count(e.children)>1&&B("Passing multiple children to the <Pin> component might lead to unexpected results.");var r=s({},e),o=new google.maps.marker.PinElement(r);e.children&&(o.glyph=l);for(var i=null==(n=a.content)||null==(n=n.firstChild)?void 0:n.firstChild;null!=i&&i.firstChild;)i.removeChild(i.firstChild);i&&i.appendChild(o.element)}else void 0===a&&console.error("The <Pin> component can only be used inside <AdvancedMarker>.")}),[a,l,e]),n.createPortal(e.children,l)},e.RenderingType={VECTOR:"VECTOR",RASTER:"RASTER",UNINITIALIZED:"UNINITIALIZED"},e.StaticMap=function(e){var t=e.url,n=e.className;if(!t)throw new Error("URL is required");return l.default.createElement("img",{className:n,src:t,width:"100%"})},e.createStaticMapsUrl=function(e){var t=e.apiKey,n=e.width,r=e.height,a=e.center,l=e.zoom,o=e.scale,i=e.format,c=e.mapType,f=e.language,d=e.region,p=e.mapId,m=e.markers,h=void 0===m?[]:m,g=e.paths,v=void 0===g?[]:g,y=e.visible,b=void 0===y?[]:y,k=e.style,w=void 0===k?[]:k;t||console.warn("API key is required"),n&&r||console.warn("Width and height are required");var S=s({key:t,size:n+"x"+r},a&&{center:re(a)},l&&{zoom:l},o&&{scale:o},i&&{format:i},c&&{maptype:c},f&&{language:f},d&&{region:d},p&&{map_id:p}),E=new URL("https://maps.googleapis.com/maps/api/staticmap");Object.entries(S).forEach((function(e){var t=e[0],n=e[1];E.searchParams.append(t,String(n))}));for(var C,_=u(function(e){var t;void 0===e&&(e=[]);var n=[],r=null==(t=e)?void 0:t.reduce((function(e,t){var n=t.color,r=void 0===n?"red":n,a=t.label,l=t.size,o=t.scale,i=t.icon,u=t.anchor,s=(i?[i,u,o]:[r,a,l]).filter(Boolean).join("-");return e[s]=e[s]||[],e[s].push(t),e}),{});return Object.values(null!=r?r:{}).forEach((function(e){var t="",r=e[0].icon;Object.entries(e[0]).forEach((function(e){var n=e[0],a=e[1];(r?["icon","anchor","scale"]:["color","label","size"]).includes(n)&&(t+="|"+n+":"+a)}));for(var a,l=u(e);!(a=l()).done;){var o=a.value,i="string"==typeof o.location?o.location:o.location.lat+","+o.location.lng;t+="|"+i}n.push(t)})),n.map(ae)}(h));!(C=_()).done;){var P=C.value;E.searchParams.append("markers",P)}for(var T,x=u(function(e){var t;void 0===e&&(e=[]);var n=[],r=null==(t=e)?void 0:t.reduce((function(e,t){var n=t.color,r=[void 0===n?"default":n,t.weight,t.fillcolor,t.geodesic].filter(Boolean).join("-");return e[r]=e[r]||[],e[r].push(t),e}),{});return Object.values(null!=r?r:{}).forEach((function(e){var t="";Object.entries(e[0]).forEach((function(e){var n=e[0],r=e[1];["color","weight","fillcolor","geodesic"].includes(n)&&(t+="|"+n+":"+r)}));for(var r,a=u(e);!(r=a()).done;){var l=r.value;if("string"==typeof l.coordinates)t+="|"+decodeURIComponent(l.coordinates);else for(var o,i=u(l.coordinates);!(o=i()).done;){var s=o.value;t+="|"+re(s)}}n.push(t)})),n.map(ae)}(v));!(T=x()).done;){var O=T.value;E.searchParams.append("path",O)}b.length&&E.searchParams.append("visible",b.map((function(e){return re(e)})).join("|"));for(var N,L=u(w.map((function(e){var t=e.featureType,n=e.elementType,r=e.stylers,a="";t&&(a+="|feature:"+t),n&&(a+="|element:"+n);for(var l,o=u(void 0===r?[]:r);!(l=o()).done;){var i=l.value;Object.entries(i).forEach((function(e){var t=e[0],n=e[1];a+="|"+t+":"+String(n).replace("#","0x")}))}return a})).map(ae));!(N=L()).done;){var z=N.value;E.searchParams.append("style",z)}return E.toString()},e.isAdvancedMarker=G,e.isLatLngLiteral=N,e.latLngEquals=function(e,t){if(!e||!t)return!1;var n=L(e),r=L(t);return n.lat===r.lat&&n.lng===r.lng},e.limitTiltRange=function(e){var t,n=e.viewState,r=n.pitch,a=n.zoom+1,l=(t=a)<=10?30:t>=15.5?67.5:t<=14?ie(t,10,14,30,45):ie(t,14,15.5,45,67.5);return s({},n,{fovy:25,pitch:Math.min(l,r)})},e.toLatLngLiteral=L,e.useAdvancedMarkerRef=function(){var e=t.useState(null),n=e[0],r=e[1];return[t.useCallback((function(e){r(e)}),[]),n]},e.useApiIsLoaded=M,e.useApiLoadingStatus=O,e.useMap=$,e.useMapsLibrary=V,e.useMarkerRef=function(){var e=t.useState(null),n=e[0],r=e[1];return[t.useCallback((function(e){r(e)}),[]),n]}}(t,n(540),n(961),n(17))},732:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.allEvents,n=e.setSelectedEvent,r=e.makeEventChange;return a.default.createElement("div",null,t.map((function(e){return a.default.createElement("div",{onClick:function(){return n(e)}},e.id," - ",e.name)})),a.default.createElement("div",null,"---"),a.default.createElement("div",{onClick:function(){return r(null,{id:0,name:"",lat:0,lng:0,heading:0,zoom:20,hidden:!1})}},"Create new event"))};var a=r(n(540))},826:function(e,t,n){"use strict";var r,a=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),o=0;o<n.length;o++)"default"!==n[o]&&a(t,e,n[o]);return l(t,e),t}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=(0,u.useState)(""),t=e[0],n=e[1],r=function(){return n("Error occurred!")},a=(0,u.useState)(null),l=a[0],o=a[1],i=(0,c.default)(null!==l,r)[0],h=(0,f.default)(i,r)[0],g=(0,u.useState)(null),v=g[0],y=g[1],b=(0,p.default)(i,v,r)[0];return u.default.createElement(u.default.Fragment,null,t,u.default.createElement(s.default,{gapiToken:l,setGapiToken:o}),!v&&h&&h.length&&u.default.createElement(m.default,{allEvents:h,makeEventChange:function(e,t){console.log(e,t)},setSelectedEvent:y}),v&&u.default.createElement(d.default,{trcEvent:v,locations:b}))};var u=o(n(540)),s=i(n(920)),c=i(n(610)),f=i(n(85)),d=i(n(523)),p=i(n(262)),m=i(n(732))},869:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var k=b.prototype=new y;k.constructor=b,h(k,v.prototype),k.isPureReactComponent=!0;var w=Array.isArray,S={H:null,A:null,T:null,S:null,V:null},E=Object.prototype.hasOwnProperty;function C(e,t,r,a,l,o){return r=o.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:o}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var P=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function x(){}function O(e,t,a,l,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case d:return O((c=e._init)(e._payload),t,a,l,o)}}if(c)return o=o(e),c=""===l?"."+T(e,0):l,w(o)?(a="",null!=c&&(a=c.replace(P,"$&/")+"/"),O(o,t,a,"",(function(e){return e}))):null!=o&&(_(o)&&(u=o,s=a+(null==o.key||e&&e.key===o.key?"":(""+o.key).replace(P,"$&/")+"/")+c,o=C(u.type,s,void 0,0,0,u.props)),t.push(o)),1;c=0;var f,m=""===l?".":l+":";if(w(e))for(var h=0;h<e.length;h++)c+=O(l=e[h],t,a,i=m+T(l,h),o);else if("function"==typeof(h=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=h.call(e),h=0;!(l=e.next()).done;)c+=O(l=l.value,t,a,i=m+T(l,h++),o);else if("object"===i){if("function"==typeof e.then)return O(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(x,x):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,l,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function N(e,t,n){if(null==e)return e;var r=[],a=0;return O(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function L(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var z="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function M(){}t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=o,t.PureComponent=b,t.StrictMode=l,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=S,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return S.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),a=e.key;if(null!=t)for(l in t.ref,void 0!==t.key&&(a=""+t.key),t)!E.call(t,l)||"key"===l||"__self"===l||"__source"===l||"ref"===l&&void 0===t.ref||(r[l]=t[l]);var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){for(var o=Array(l),i=0;i<l;i++)o[i]=arguments[i+2];r.children=o}return C(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,a={},l=null;if(null!=t)for(r in void 0!==t.key&&(l=""+t.key),t)E.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var o=arguments.length-2;if(1===o)a.children=n;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];a.children=i}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===a[r]&&(a[r]=o[r]);return C(e,l,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:L}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=S.T,n={};S.T=n;try{var r=e(),a=S.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(M,z)}catch(e){z(e)}finally{S.T=t}},t.unstable_useCacheRefresh=function(){return S.H.useCacheRefresh()},t.use=function(e){return S.H.use(e)},t.useActionState=function(e,t,n){return S.H.useActionState(e,t,n)},t.useCallback=function(e,t){return S.H.useCallback(e,t)},t.useContext=function(e){return S.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return S.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=S.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return S.H.useId()},t.useImperativeHandle=function(e,t,n){return S.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return S.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return S.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return S.H.useMemo(e,t)},t.useOptimistic=function(e,t){return S.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return S.H.useReducer(e,t,n)},t.useRef=function(e){return S.H.useRef(e)},t.useState=function(e){return S.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return S.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return S.H.useTransition()},t.version="19.1.0"},871:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.location,n=e.zoom,r=e.center,l=r[0],o=r[1],i=513592.6474060927*Math.cos(l*Math.PI/180)/Math.pow(2,n),u=.5*window.innerWidth,s=.5*window.innerHeight,c=362778/i;return a.default.createElement("div",{style:{position:"absolute",backgroundColor:"rgb(".concat(255*t.colorR,", ").concat(255*t.colorG,", ").concat(255*t.colorB,")"),border:"3px solid rgb(".concat(255*t.colorR*.8,", ").concat(255*t.colorG*.8,", ").concat(255*t.colorB*.8,")"),left:u+(t.lng-o)*c*Math.cos(l)-.5*t.width/i,bottom:s+(t.lat-l)*c-.5*t.width/i,width:t.width/i,height:t.width/i,boxSizing:"border-box"}},t.label)};var a=r(n(540))},920:function(e,t,n){"use strict";var r,a=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),l=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),o=0;o<n.length;o++)"default"!==n[o]&&a(t,e,n[o]);return l(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.GAPI_KEY=void 0,t.default=function(e){var n=e.gapiToken,r=e.setGapiToken,a=(0,i.useState)(!1),l=a[0],o=a[1],c=(0,i.useRef)(null);(0,i.useEffect)((function(){gapi.load("client",(function(){c.current=google.accounts.oauth2.initTokenClient({client_id:u,scope:s,callback:function(){return r(gapi.client.getToken())}}),gapi.client.init({apiKey:t.GAPI_KEY,discoveryDocs:["https://sheets.googleapis.com/$discovery/rest?version=v4"]}).then((function(){return o(!0)}))}))}),[]);var f=(0,i.useCallback)((function(){var e=null===gapi.client.getToken()?"consent":"";c.current.requestAccessToken({prompt:e})}),[]);return n?i.default.createElement(i.default.Fragment,null):i.default.createElement("div",null,i.default.createElement("button",{onClick:f,disabled:!l},"Authorize"))};var i=o(n(540));t.GAPI_KEY="AIzaSyDIHBOQ1RJUevjCW-s5HZAPftdudwtuERw";var u="98922625190-807sm5s9oh3a8b2djpth3gkii7cuf3g9.apps.googleusercontent.com",s="https://www.googleapis.com/auth/spreadsheets"},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{"use strict";e.exports=n(477)}},t={};!function n(r){var a=t[r];if(void 0!==a)return a.exports;var l=t[r]={exports:{}};return e[r].call(l.exports,l,l.exports,n),l.exports}(270)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,